{
  "0x256a07a69c9a082b79a00d09191f48bb51274b84479d3b1e76d8ad714589fc96": {
    "name": "Executive",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Executive",
      "sourceName": "contracts/Systems/EXC.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract Proxy",
              "name": "proxy_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "instructionsId",
              "type": "uint256"
            }
          ],
          "name": "InstructionsExecuted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "instructionsId",
              "type": "uint256"
            }
          ],
          "name": "InstructionsStored",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ProxyLaunched",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "KEYCODE",
          "outputs": [
            {
              "internalType": "bytes3",
              "name": "",
              "type": "bytes3"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "_proxy",
          "outputs": [
            {
              "internalType": "contract Proxy",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "instructionsId_",
              "type": "uint256"
            }
          ],
          "name": "executeInstructions",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "launchProxy",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "enum Actions",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                }
              ],
              "internalType": "struct Instruction[]",
              "name": "instructions_",
              "type": "tuple[]"
            }
          ],
          "name": "storeInstructions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "storedInstructions",
          "outputs": [
            {
              "internalType": "enum Actions",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalInstructions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b506040516113b33803806113b383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611320806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636eaadfc71161005b5780636eaadfc7146100eb57806385e0d8ad146100f45780638ba639a4146100fc578063cc2effdc1461011d57600080fd5b806318dc0de7146100825780631ae7ec2e146100a85780632ce21901146100d6575b600080fd5b610095610090366004610f45565b610162565b6040519081526020015b60405180910390f35b6040517f4558430000000000000000000000000000000000000000000000000000000000815260200161009f565b6100e96100e4366004610fba565b610833565b005b61009560015481565b6100e9610b33565b61010f61010a366004610fd3565b610d0b565b60405161009f929190611024565b60005461013d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190611084565b610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b6000600154600161029791906110dc565b600081815260026020526040902090915083610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a20696e737460448201527f72756374696f6e732063616e6e6f7420626520656d7074790000000000000000606482015260840161027d565b60005b848110156107e257610372868683818110610355576103556110f4565b905060400201602001602081019061036d9190611148565b610d59565b6000868683818110610386576103866110f4565b61039c9260206040909202019081019150611172565b60048111156103ad576103ad610ff5565b14806103f1575060018686838181106103c8576103c86110f4565b6103de9260206040909202019081019150611172565b60048111156103ef576103ef610ff5565b145b1561078e57600086868381811061040a5761040a6110f4565b90506040020160200160208101906104229190611148565b73ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061118f565b905061049b81610dec565b7f45584300000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000008216141561078c57600487876104f46001826111d1565b818110610503576105036110f4565b6105199260206040909202019081019150611172565b600481111561052a5761052a610ff5565b14610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152608860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f67657320746f20746865204578656375746976652073797374656d202845584360648201527f29207265717569726573206368616e67696e67207468652050726f787920657860848201527f6563757469766520617320746865206c6173742073746570206f66207468652060a48201527f70726f706f73616c00000000000000000000000000000000000000000000000060c482015260e40161027d565b86868381811061063b5761063b6110f4565b90506040020160200160208101906106539190611148565b73ffffffffffffffffffffffffffffffffffffffff1687876106766001826111d1565b818110610685576106856110f4565b905060400201602001602081019061069d9190611148565b73ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606f60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f676545786563757469766520746172676574206164647265737320646f65732060648201527f6e6f74206d61746368207468652075706772616465642045786563757469766560848201527f2073797374656d2061646472657373000000000000000000000000000000000060a482015260c40161027d565b505b818686838181106107a1576107a16110f4565b835460018101855560009485526020909420604090910292909201929190910190506107cd82826111e8565b505080806107da906112b1565b915050610338565b50600180549060006107f3836112b1565b90915550506040518281527f786456549a8048fc360b44d675c164244436ef1e5048c3aecea4d160400fd0019060200160405180910390a1509392505050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611084565b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b600081815260026020526040902080546109ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f63616e6e6f742065786563757465496e737472756374696f6e7328293a20707260448201527f6f706f73616c20646f6573206e6f742065786973740000000000000000000000606482015260840161027d565b60005b8154811015610afb57600054825473ffffffffffffffffffffffffffffffffffffffff9091169063c4d1f8f190849084908110610a2f57610a2f6110f4565b600091825260209091200154845460ff90911690859085908110610a5557610a556110f4565b60009182526020909120015460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ab69291610100900473ffffffffffffffffffffffffffffffffffffffff1690600401611024565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050508080610af3906112b1565b9150506109f0565b506040518281527fdfded950fef0d7666005e810dd1bfab64a4d9e8bc53d3abe31c2cf7268d3d8239060200160405180910390a15050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611084565b610c51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b60008054604080517f01339c21000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926301339c219260048084019382900301818387803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050507ffa7fcc389a8dd8946810c44eaba79476ebda5ffa11280a99bd7fbef680336ec742604051610d0191815260200190565b60405180910390a1565b60026020528160005260406000208181548110610d2757600080fd5b60009182526020909120015460ff81169250610100900473ffffffffffffffffffffffffffffffffffffffff16905082565b803b80610de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a207461726760448201527f65742061646472657373206973206e6f74206120636f6e747261637400000000606482015260840161027d565b5050565b60005b6003811015610de8576000828260038110610e0c57610e0c6110f4565b1a60f81b90507f41000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610801590610ea657507f5a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f2063616e6e6f742073746f7265496e737472756374696f6e7328293a20696e7660448201527f616c6964206b6579636f64650000000000000000000000000000000000000000606482015260840161027d565b5080610f3d816112b1565b915050610def565b60008060208385031215610f5857600080fd5b823567ffffffffffffffff80821115610f7057600080fd5b818501915085601f830112610f8457600080fd5b813581811115610f9357600080fd5b8660208260061b8501011115610fa857600080fd5b60209290920196919550909350505050565b600060208284031215610fcc57600080fd5b5035919050565b60008060408385031215610fe657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081016005841061105f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b60006020828403121561109657600080fd5b815180151581146110a657600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156110ef576110ef6110ad565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461114557600080fd5b50565b60006020828403121561115a57600080fd5b81356110a681611123565b6005811061114557600080fd5b60006020828403121561118457600080fd5b81356110a681611165565b6000602082840312156111a157600080fd5b81517fffffff0000000000000000000000000000000000000000000000000000000000811681146110a657600080fd5b6000828210156111e3576111e36110ad565b500390565b81356111f381611165565b6005811061122a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815460ff82169150817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008216178355602084013561126781611123565b74ffffffffffffffffffffffffffffffffffffffff008160081b16837fffffffffffffffffffffff0000000000000000000000000000000000000000008416171784555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112e3576112e36110ad565b506001019056fea26469706673582212207f2306b7e9458cbaaf143de007e1eb64664a8a3fb3216da31316011629e6293864736f6c634300080b0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80636eaadfc71161005b5780636eaadfc7146100eb57806385e0d8ad146100f45780638ba639a4146100fc578063cc2effdc1461011d57600080fd5b806318dc0de7146100825780631ae7ec2e146100a85780632ce21901146100d6575b600080fd5b610095610090366004610f45565b610162565b6040519081526020015b60405180910390f35b6040517f4558430000000000000000000000000000000000000000000000000000000000815260200161009f565b6100e96100e4366004610fba565b610833565b005b61009560015481565b6100e9610b33565b61010f61010a366004610fd3565b610d0b565b60405161009f929190611024565b60005461013d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190611084565b610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b6000600154600161029791906110dc565b600081815260026020526040902090915083610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a20696e737460448201527f72756374696f6e732063616e6e6f7420626520656d7074790000000000000000606482015260840161027d565b60005b848110156107e257610372868683818110610355576103556110f4565b905060400201602001602081019061036d9190611148565b610d59565b6000868683818110610386576103866110f4565b61039c9260206040909202019081019150611172565b60048111156103ad576103ad610ff5565b14806103f1575060018686838181106103c8576103c86110f4565b6103de9260206040909202019081019150611172565b60048111156103ef576103ef610ff5565b145b1561078e57600086868381811061040a5761040a6110f4565b90506040020160200160208101906104229190611148565b73ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061118f565b905061049b81610dec565b7f45584300000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000008216141561078c57600487876104f46001826111d1565b818110610503576105036110f4565b6105199260206040909202019081019150611172565b600481111561052a5761052a610ff5565b14610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152608860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f67657320746f20746865204578656375746976652073797374656d202845584360648201527f29207265717569726573206368616e67696e67207468652050726f787920657860848201527f6563757469766520617320746865206c6173742073746570206f66207468652060a48201527f70726f706f73616c00000000000000000000000000000000000000000000000060c482015260e40161027d565b86868381811061063b5761063b6110f4565b90506040020160200160208101906106539190611148565b73ffffffffffffffffffffffffffffffffffffffff1687876106766001826111d1565b818110610685576106856110f4565b905060400201602001602081019061069d9190611148565b73ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606f60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f676545786563757469766520746172676574206164647265737320646f65732060648201527f6e6f74206d61746368207468652075706772616465642045786563757469766560848201527f2073797374656d2061646472657373000000000000000000000000000000000060a482015260c40161027d565b505b818686838181106107a1576107a16110f4565b835460018101855560009485526020909420604090910292909201929190910190506107cd82826111e8565b505080806107da906112b1565b915050610338565b50600180549060006107f3836112b1565b90915550506040518281527f786456549a8048fc360b44d675c164244436ef1e5048c3aecea4d160400fd0019060200160405180910390a1509392505050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611084565b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b600081815260026020526040902080546109ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f63616e6e6f742065786563757465496e737472756374696f6e7328293a20707260448201527f6f706f73616c20646f6573206e6f742065786973740000000000000000000000606482015260840161027d565b60005b8154811015610afb57600054825473ffffffffffffffffffffffffffffffffffffffff9091169063c4d1f8f190849084908110610a2f57610a2f6110f4565b600091825260209091200154845460ff90911690859085908110610a5557610a556110f4565b60009182526020909120015460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ab69291610100900473ffffffffffffffffffffffffffffffffffffffff1690600401611024565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050508080610af3906112b1565b9150506109f0565b506040518281527fdfded950fef0d7666005e810dd1bfab64a4d9e8bc53d3abe31c2cf7268d3d8239060200160405180910390a15050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611084565b610c51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b60008054604080517f01339c21000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926301339c219260048084019382900301818387803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050507ffa7fcc389a8dd8946810c44eaba79476ebda5ffa11280a99bd7fbef680336ec742604051610d0191815260200190565b60405180910390a1565b60026020528160005260406000208181548110610d2757600080fd5b60009182526020909120015460ff81169250610100900473ffffffffffffffffffffffffffffffffffffffff16905082565b803b80610de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a207461726760448201527f65742061646472657373206973206e6f74206120636f6e747261637400000000606482015260840161027d565b5050565b60005b6003811015610de8576000828260038110610e0c57610e0c6110f4565b1a60f81b90507f41000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610801590610ea657507f5a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f2063616e6e6f742073746f7265496e737472756374696f6e7328293a20696e7660448201527f616c6964206b6579636f64650000000000000000000000000000000000000000606482015260840161027d565b5080610f3d816112b1565b915050610def565b60008060208385031215610f5857600080fd5b823567ffffffffffffffff80821115610f7057600080fd5b818501915085601f830112610f8457600080fd5b813581811115610f9357600080fd5b8660208260061b8501011115610fa857600080fd5b60209290920196919550909350505050565b600060208284031215610fcc57600080fd5b5035919050565b60008060408385031215610fe657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081016005841061105f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b60006020828403121561109657600080fd5b815180151581146110a657600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156110ef576110ef6110ad565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461114557600080fd5b50565b60006020828403121561115a57600080fd5b81356110a681611123565b6005811061114557600080fd5b60006020828403121561118457600080fd5b81356110a681611165565b6000602082840312156111a157600080fd5b81517fffffff0000000000000000000000000000000000000000000000000000000000811681146110a657600080fd5b6000828210156111e3576111e36110ad565b500390565b81356111f381611165565b6005811061122a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815460ff82169150817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008216178355602084013561126781611123565b74ffffffffffffffffffffffffffffffffffffffff008160081b16837fffffffffffffffffffffff0000000000000000000000000000000000000000008416171784555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112e3576112e36110ad565b506001019056fea26469706673582212207f2306b7e9458cbaaf143de007e1eb64664a8a3fb3216da31316011629e6293864736f6c634300080b0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_4389": {
              "entryPoint": null,
              "id": 4389,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_4881": {
              "entryPoint": null,
              "id": 4881,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_contract$_Proxy_$4866_fromMemory": {
              "entryPoint": 84,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:320:28",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:28",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "109:209:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "155:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "164:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "167:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "157:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "157:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "157:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "130:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "139:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "126:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "126:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "151:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "122:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "122:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "119:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "180:29:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "199:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "193:5:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "193:16:28"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "184:5:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "272:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "281:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "284:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "274:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "274:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "274:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "231:5:28"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "242:5:28"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "257:3:28",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "262:1:28",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "253:3:28"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "253:11:28"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "266:1:28",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "249:3:28"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "249:19:28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "238:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "238:31:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "228:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "228:42:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "221:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "221:50:28"
                          },
                          "nodeType": "YulIf",
                          "src": "218:70:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "297:15:28",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "307:5:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "297:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_Proxy_$4866_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "75:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "86:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "98:6:28",
                        "type": ""
                      }
                    ],
                    "src": "14:304:28"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_Proxy_$4866_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
              "id": 28,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506040516113b33803806113b383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611320806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636eaadfc71161005b5780636eaadfc7146100eb57806385e0d8ad146100f45780638ba639a4146100fc578063cc2effdc1461011d57600080fd5b806318dc0de7146100825780631ae7ec2e146100a85780632ce21901146100d6575b600080fd5b610095610090366004610f45565b610162565b6040519081526020015b60405180910390f35b6040517f4558430000000000000000000000000000000000000000000000000000000000815260200161009f565b6100e96100e4366004610fba565b610833565b005b61009560015481565b6100e9610b33565b61010f61010a366004610fd3565b610d0b565b60405161009f929190611024565b60005461013d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190611084565b610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b6000600154600161029791906110dc565b600081815260026020526040902090915083610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a20696e737460448201527f72756374696f6e732063616e6e6f7420626520656d7074790000000000000000606482015260840161027d565b60005b848110156107e257610372868683818110610355576103556110f4565b905060400201602001602081019061036d9190611148565b610d59565b6000868683818110610386576103866110f4565b61039c9260206040909202019081019150611172565b60048111156103ad576103ad610ff5565b14806103f1575060018686838181106103c8576103c86110f4565b6103de9260206040909202019081019150611172565b60048111156103ef576103ef610ff5565b145b1561078e57600086868381811061040a5761040a6110f4565b90506040020160200160208101906104229190611148565b73ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061118f565b905061049b81610dec565b7f45584300000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000008216141561078c57600487876104f46001826111d1565b818110610503576105036110f4565b6105199260206040909202019081019150611172565b600481111561052a5761052a610ff5565b14610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152608860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f67657320746f20746865204578656375746976652073797374656d202845584360648201527f29207265717569726573206368616e67696e67207468652050726f787920657860848201527f6563757469766520617320746865206c6173742073746570206f66207468652060a48201527f70726f706f73616c00000000000000000000000000000000000000000000000060c482015260e40161027d565b86868381811061063b5761063b6110f4565b90506040020160200160208101906106539190611148565b73ffffffffffffffffffffffffffffffffffffffff1687876106766001826111d1565b818110610685576106856110f4565b905060400201602001602081019061069d9190611148565b73ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606f60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f676545786563757469766520746172676574206164647265737320646f65732060648201527f6e6f74206d61746368207468652075706772616465642045786563757469766560848201527f2073797374656d2061646472657373000000000000000000000000000000000060a482015260c40161027d565b505b818686838181106107a1576107a16110f4565b835460018101855560009485526020909420604090910292909201929190910190506107cd82826111e8565b505080806107da906112b1565b915050610338565b50600180549060006107f3836112b1565b90915550506040518281527f786456549a8048fc360b44d675c164244436ef1e5048c3aecea4d160400fd0019060200160405180910390a1509392505050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611084565b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b600081815260026020526040902080546109ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f63616e6e6f742065786563757465496e737472756374696f6e7328293a20707260448201527f6f706f73616c20646f6573206e6f742065786973740000000000000000000000606482015260840161027d565b60005b8154811015610afb57600054825473ffffffffffffffffffffffffffffffffffffffff9091169063c4d1f8f190849084908110610a2f57610a2f6110f4565b600091825260209091200154845460ff90911690859085908110610a5557610a556110f4565b60009182526020909120015460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ab69291610100900473ffffffffffffffffffffffffffffffffffffffff1690600401611024565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050508080610af3906112b1565b9150506109f0565b506040518281527fdfded950fef0d7666005e810dd1bfab64a4d9e8bc53d3abe31c2cf7268d3d8239060200160405180910390a15050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611084565b610c51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b60008054604080517f01339c21000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926301339c219260048084019382900301818387803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050507ffa7fcc389a8dd8946810c44eaba79476ebda5ffa11280a99bd7fbef680336ec742604051610d0191815260200190565b60405180910390a1565b60026020528160005260406000208181548110610d2757600080fd5b60009182526020909120015460ff81169250610100900473ffffffffffffffffffffffffffffffffffffffff16905082565b803b80610de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a207461726760448201527f65742061646472657373206973206e6f74206120636f6e747261637400000000606482015260840161027d565b5050565b60005b6003811015610de8576000828260038110610e0c57610e0c6110f4565b1a60f81b90507f41000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610801590610ea657507f5a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f2063616e6e6f742073746f7265496e737472756374696f6e7328293a20696e7660448201527f616c6964206b6579636f64650000000000000000000000000000000000000000606482015260840161027d565b5080610f3d816112b1565b915050610def565b60008060208385031215610f5857600080fd5b823567ffffffffffffffff80821115610f7057600080fd5b818501915085601f830112610f8457600080fd5b813581811115610f9357600080fd5b8660208260061b8501011115610fa857600080fd5b60209290920196919550909350505050565b600060208284031215610fcc57600080fd5b5035919050565b60008060408385031215610fe657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081016005841061105f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b60006020828403121561109657600080fd5b815180151581146110a657600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156110ef576110ef6110ad565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461114557600080fd5b50565b60006020828403121561115a57600080fd5b81356110a681611123565b6005811061114557600080fd5b60006020828403121561118457600080fd5b81356110a681611165565b6000602082840312156111a157600080fd5b81517fffffff0000000000000000000000000000000000000000000000000000000000811681146110a657600080fd5b6000828210156111e3576111e36110ad565b500390565b81356111f381611165565b6005811061122a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815460ff82169150817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008216178355602084013561126781611123565b74ffffffffffffffffffffffffffffffffffffffff008160081b16837fffffffffffffffffffffff0000000000000000000000000000000000000000008416171784555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112e3576112e36110ad565b506001019056fea26469706673582212207f2306b7e9458cbaaf143de007e1eb64664a8a3fb3216da31316011629e6293864736f6c634300080b0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x13B3 CODESIZE SUB DUP1 PUSH2 0x13B3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1320 DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EAADFC7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6EAADFC7 EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x85E0D8AD EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x8BA639A4 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0xCC2EFFDC EQ PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18DC0DE7 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x1AE7EC2E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x2CE21901 EQ PUSH2 0xD6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4558430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9F JUMP JUMPDEST PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x833 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE9 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xFD3 JUMP JUMPDEST PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9F SWAP3 SWAP2 SWAP1 PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x13D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH2 0x297 SWAP2 SWAP1 PUSH2 0x10DC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP4 PUSH2 0x335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A20696E7374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756374696F6E732063616E6E6F7420626520656D7074790000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x372 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x355 JUMPI PUSH2 0x355 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x386 JUMPI PUSH2 0x386 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x39C SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3AD JUMPI PUSH2 0x3AD PUSH2 0xFF5 JUMP JUMPDEST EQ DUP1 PUSH2 0x3F1 JUMPI POP PUSH1 0x1 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x3C8 JUMPI PUSH2 0x3C8 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x3DE SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3EF JUMPI PUSH2 0x3EF PUSH2 0xFF5 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x78E JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x40A JUMPI PUSH2 0x40A PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1AE7EC2E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x118F JUMP JUMPDEST SWAP1 POP PUSH2 0x49B DUP2 PUSH2 0xDEC JUMP JUMPDEST PUSH32 0x4558430000000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP3 AND EQ ISZERO PUSH2 0x78C JUMPI PUSH1 0x4 DUP8 DUP8 PUSH2 0x4F4 PUSH1 0x1 DUP3 PUSH2 0x11D1 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x519 SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52A JUMPI PUSH2 0x52A PUSH2 0xFF5 JUMP JUMPDEST EQ PUSH2 0x629 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x88 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A206368616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x67657320746F20746865204578656375746976652073797374656D2028455843 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x29207265717569726573206368616E67696E67207468652050726F7879206578 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x6563757469766520617320746865206C6173742073746570206F662074686520 PUSH1 0xA4 DUP3 ADD MSTORE PUSH32 0x70726F706F73616C000000000000000000000000000000000000000000000000 PUSH1 0xC4 DUP3 ADD MSTORE PUSH1 0xE4 ADD PUSH2 0x27D JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x63B JUMPI PUSH2 0x63B PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 PUSH2 0x676 PUSH1 0x1 DUP3 PUSH2 0x11D1 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x685 JUMPI PUSH2 0x685 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A206368616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x676545786563757469766520746172676574206164647265737320646F657320 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6E6F74206D617463682074686520757067726164656420457865637574697665 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x2073797374656D20616464726573730000000000000000000000000000000000 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x27D JUMP JUMPDEST POP JUMPDEST DUP2 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x7A1 JUMPI PUSH2 0x7A1 PUSH2 0x10F4 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 DUP2 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 SWAP1 SWAP5 KECCAK256 PUSH1 0x40 SWAP1 SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 POP PUSH2 0x7CD DUP3 DUP3 PUSH2 0x11E8 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x7DA SWAP1 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x338 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x7F3 DUP4 PUSH2 0x12B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x786456549A8048FC360B44D675C164244436EF1E5048C3AECEA4D160400FD001 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x9ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742065786563757465496E737472756374696F6E7328293A207072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F706F73616C20646F6573206E6F742065786973740000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC4D1F8F1 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xA2F JUMPI PUSH2 0xA2F PUSH2 0x10F4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP5 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xA55 JUMPI PUSH2 0xA55 PUSH2 0x10F4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP2 MSTORE PUSH2 0xAB6 SWAP3 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x4 ADD PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xAF3 SWAP1 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9F0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xDFDED950FEF0D7666005E810DD1BFAB64A4D9E8BC53D3ABE31C2CF7268D3D823 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xC51 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x1339C2100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0x1339C21 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xFA7FCC389A8DD8946810C44EABA79476EBDA5FFA11280A99BD7FBEF680336EC7 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xD01 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xFF DUP2 AND SWAP3 POP PUSH2 0x100 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST DUP1 EXTCODESIZE DUP1 PUSH2 0xDE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A2074617267 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65742061646472657373206973206E6F74206120636F6E747261637400000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xDE8 JUMPI PUSH1 0x0 DUP3 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0xE0C JUMPI PUSH2 0xE0C PUSH2 0x10F4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL SWAP1 POP PUSH32 0x4100000000000000000000000000000000000000000000000000000000000000 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND LT DUP1 ISZERO SWAP1 PUSH2 0xEA6 JUMPI POP PUSH32 0x5A00000000000000000000000000000000000000000000000000000000000000 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND GT ISZERO JUMPDEST PUSH2 0xF32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x2063616E6E6F742073746F7265496E737472756374696F6E7328293A20696E76 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206B6579636F64650000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST POP DUP1 PUSH2 0xF3D DUP2 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x6 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x5 DUP5 LT PUSH2 0x105F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x10EF JUMPI PUSH2 0x10EF PUSH2 0x10AD JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10A6 DUP2 PUSH2 0x1123 JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x1145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10A6 DUP2 PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x11E3 JUMPI PUSH2 0x11E3 PUSH2 0x10AD JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11F3 DUP2 PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x122A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH1 0xFF DUP3 AND SWAP2 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND OR DUP4 SSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1267 DUP2 PUSH2 0x1123 JUMP JUMPDEST PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 PUSH1 0x8 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 DUP5 AND OR OR DUP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x12E3 JUMPI PUSH2 0x12E3 PUSH2 0x10AD JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x2306B7E9458CBAAF143DE007E1EB64664A8A3FB3216DA31316011629E6293864 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
          "sourceMap": "130:3895:22:-:0;;;419:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;146:6:21;:15;;-1:-1:-1;;;;;;146:15:21;-1:-1:-1;;;;;146:15:21;;;;;;;;;;130:3895:22;;14:304:28;98:6;151:2;139:9;130:7;126:23;122:32;119:52;;;167:1;164;157:12;119:52;193:16;;-1:-1:-1;;;;;238:31:28;;228:42;;218:70;;284:1;281;274:12;218:70;307:5;14:304;-1:-1:-1;;;14:304:28:o;:::-;130:3895:22;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@KEYCODE_4890": {
              "entryPoint": null,
              "id": 4890,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_ensureContract_5137": {
              "entryPoint": 3417,
              "id": 5137,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_ensureValidKeycode_5172": {
              "entryPoint": 3564,
              "id": 5172,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_proxy_4378": {
              "entryPoint": null,
              "id": 4378,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@executeInstructions_5120": {
              "entryPoint": 2099,
              "id": 5120,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@launchProxy_4926": {
              "entryPoint": 2867,
              "id": 4926,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@storeInstructions_5065": {
              "entryPoint": 354,
              "id": 5065,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@storedInstructions_4898": {
              "entryPoint": 3339,
              "id": 4898,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@totalInstructions_4892": {
              "entryPoint": null,
              "id": 4892,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 4424,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_struct$_Instruction_$4484_calldata_ptr_$dyn_calldata_ptr": {
              "entryPoint": 3909,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 4228,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes3_fromMemory": {
              "entryPoint": 4495,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_enum$_Actions_$4478": {
              "entryPoint": 4466,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 4026,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_uint256": {
              "entryPoint": 4051,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes3__to_t_bytes3__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_Proxy_$4866__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_enum$_Actions_$4478_t_address__to_t_uint8_t_address__fromStack_reversed": {
              "entryPoint": 4132,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_15178d8ba4c75f9e599cef95f9266d4998fd4cbc008ef0161996289b16349fe7__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_24a9da6747aa4100740d1720f6949baf3a66a27e52c7fba642982cc0492d1325__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_66189ddadcd60a8f3e10e7ca502ad4dd85dd0a4d705f978b4d93bd4cd98b8998__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_74c927f00ac5c51749b57f85942033fedac295d0a8fd00d4de835d9d35b5f244__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7c75bdcb95f961b5e6146710887afb41aa7d1b8d98dcc9e221b03d500e83051e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7e7504631ad7c7a00bca8e109b434d988c97d128820e886586e001157698984f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_db88129b48afe0554eae149554b1104627b5329ca3ae8dbc11d5f2b4bbbae41a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 4316,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 4561,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 4785,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 4269,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 4085,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 4340,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "update_storage_value_offset_0t_struct$_Instruction_$4484_calldata_ptr_to_t_struct$_Instruction_$4484_storage": {
              "entryPoint": 4584,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 4387,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_enum_Actions": {
              "entryPoint": 4453,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:9173:28",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:28",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "150:510:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "196:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "205:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "208:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "198:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "198:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "198:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "180:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "167:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "167:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "192:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "163:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "163:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "160:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "221:37:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "248:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "235:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "235:23:28"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "225:6:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "267:28:28",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "277:18:28",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "271:2:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "322:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "331:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "334:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "324:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "324:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "324:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "310:6:28"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "318:2:28"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "307:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "307:14:28"
                          },
                          "nodeType": "YulIf",
                          "src": "304:34:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "347:32:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "361:9:28"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "372:6:28"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "357:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "357:22:28"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "351:2:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "427:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "436:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "439:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "429:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "429:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "429:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "406:2:28"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "410:4:28",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "402:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "402:13:28"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "417:7:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "398:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "398:27:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "391:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "391:35:28"
                          },
                          "nodeType": "YulIf",
                          "src": "388:55:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "452:30:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "479:2:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "466:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "466:16:28"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "456:6:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "509:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "518:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "521:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "511:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "511:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "511:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "497:6:28"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "505:2:28"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "494:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "494:14:28"
                          },
                          "nodeType": "YulIf",
                          "src": "491:34:28"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "583:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "592:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "595:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "585:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "585:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "585:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "548:2:28"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "556:1:28",
                                            "type": "",
                                            "value": "6"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "559:6:28"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "552:3:28"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "552:14:28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "544:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "544:23:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "569:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "540:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "540:32:28"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "574:7:28"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "537:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "537:45:28"
                          },
                          "nodeType": "YulIf",
                          "src": "534:65:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "608:21:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "622:2:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "626:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "618:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "618:11:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "608:6:28"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "638:16:28",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "648:6:28"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "638:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_struct$_Instruction_$4484_calldata_ptr_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "108:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "119:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "131:6:28",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "139:6:28",
                        "type": ""
                      }
                    ],
                    "src": "14:646:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "766:76:28",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "776:26:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "788:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "799:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "784:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "784:18:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "776:4:28"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "818:9:28"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "829:6:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "811:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "811:25:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "811:25:28"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "735:9:28",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "746:6:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "757:4:28",
                        "type": ""
                      }
                    ],
                    "src": "665:177:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "946:149:28",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "956:26:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "968:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "979:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "964:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "964:18:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "956:4:28"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "998:9:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1013:6:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1021:66:28",
                                    "type": "",
                                    "value": "0xffffff0000000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1009:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1009:79:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "991:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "991:98:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "991:98:28"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes3__to_t_bytes3__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "915:9:28",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "926:6:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "937:4:28",
                        "type": ""
                      }
                    ],
                    "src": "847:248:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1170:110:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1216:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1225:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1228:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1218:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1218:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1218:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1191:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1200:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1187:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1187:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1212:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1183:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1183:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "1180:52:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1241:33:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1264:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1251:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1251:23:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1241:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1136:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1147:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1159:6:28",
                        "type": ""
                      }
                    ],
                    "src": "1100:180:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1372:161:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1418:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1427:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1430:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1420:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1420:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1420:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1393:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1402:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1389:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1389:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1414:2:28",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1385:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1385:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "1382:52:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1443:33:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1466:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1453:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1453:23:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1443:6:28"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1485:42:28",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1512:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1523:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1508:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1508:18:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1495:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1495:32:28"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1485:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1330:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1341:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1353:6:28",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1361:6:28",
                        "type": ""
                      }
                    ],
                    "src": "1285:248:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1570:152:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1587:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1590:77:28",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1580:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1580:88:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1580:88:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1684:1:28",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1687:4:28",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1677:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1677:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1677:15:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1708:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1711:4:28",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1701:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1701:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1701:15:28"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1538:184:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1866:378:28",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1876:26:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1888:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1899:2:28",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1884:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1884:18:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1876:4:28"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1944:168:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1965:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1968:77:28",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1958:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1958:88:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1958:88:28"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2066:1:28",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2069:4:28",
                                      "type": "",
                                      "value": "0x21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2059:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2059:15:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2059:15:28"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2094:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2097:4:28",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2087:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2087:15:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2087:15:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1924:6:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1932:1:28",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1921:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1921:13:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1914:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1914:21:28"
                          },
                          "nodeType": "YulIf",
                          "src": "1911:201:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2128:9:28"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2139:6:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2121:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2121:25:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2121:25:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2166:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2177:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2162:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2162:18:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2186:6:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2194:42:28",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2182:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2182:55:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2155:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2155:83:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2155:83:28"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_enum$_Actions_$4478_t_address__to_t_uint8_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1827:9:28",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1838:6:28",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1846:6:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1857:4:28",
                        "type": ""
                      }
                    ],
                    "src": "1727:517:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2364:125:28",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2374:26:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2386:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2397:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2382:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2382:18:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2374:4:28"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2416:9:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2431:6:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2439:42:28",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2427:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2427:55:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2409:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2409:74:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2409:74:28"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_Proxy_$4866__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2333:9:28",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2344:6:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2355:4:28",
                        "type": ""
                      }
                    ],
                    "src": "2249:240:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2595:125:28",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2605:26:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2617:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2628:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2613:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2613:18:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2605:4:28"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2647:9:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2662:6:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2670:42:28",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2658:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2658:55:28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2640:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2640:74:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2640:74:28"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2564:9:28",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2575:6:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2586:4:28",
                        "type": ""
                      }
                    ],
                    "src": "2494:226:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2803:199:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2849:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2858:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2861:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2851:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2851:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2851:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2824:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2833:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2820:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2820:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2845:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2816:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2816:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "2813:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2874:29:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2893:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2887:5:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2887:16:28"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2878:5:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2956:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2965:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2968:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2958:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2958:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2958:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2925:5:28"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2946:5:28"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2939:6:28"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2939:13:28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2932:6:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2932:21:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2922:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2922:32:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2915:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2915:40:28"
                          },
                          "nodeType": "YulIf",
                          "src": "2912:60:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2981:15:28",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2991:5:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2981:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2769:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2780:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2792:6:28",
                        "type": ""
                      }
                    ],
                    "src": "2725:277:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3181:249:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3198:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3209:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3191:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3191:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3191:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3232:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3243:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3228:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3228:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3248:2:28",
                                "type": "",
                                "value": "59"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3221:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3221:30:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3221:30:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3271:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3282:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3267:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3267:18:28"
                              },
                              {
                                "hexValue": "6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c69",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3287:34:28",
                                "type": "",
                                "value": "onlyPolicy(): only approved poli"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3260:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3260:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3260:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3342:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3353:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3338:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3338:18:28"
                              },
                              {
                                "hexValue": "636965732063616e2063616c6c20746869732066756e6374696f6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3358:29:28",
                                "type": "",
                                "value": "cies can call this function"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3331:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3331:57:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3331:57:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3397:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3409:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3420:3:28",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3405:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3405:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3397:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_74c927f00ac5c51749b57f85942033fedac295d0a8fd00d4de835d9d35b5f244__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3158:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3172:4:28",
                        "type": ""
                      }
                    ],
                    "src": "3007:423:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3467:152:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3484:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3487:77:28",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3477:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3477:88:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3477:88:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3581:1:28",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3584:4:28",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3574:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3574:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3574:15:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3605:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3608:4:28",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3598:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3598:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3598:15:28"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3435:184:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3672:80:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3699:22:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "3701:16:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3701:18:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3701:18:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3688:1:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "3695:1:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "3691:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3691:6:28"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3685:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3685:13:28"
                          },
                          "nodeType": "YulIf",
                          "src": "3682:39:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3730:16:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3741:1:28"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3744:1:28"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3737:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3737:9:28"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "3730:3:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "3655:1:28",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "3658:1:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "3664:3:28",
                        "type": ""
                      }
                    ],
                    "src": "3624:128:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3931:246:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3948:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3959:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3941:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3941:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3941:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3982:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3993:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3978:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3978:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3998:2:28",
                                "type": "",
                                "value": "56"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3971:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3971:30:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3971:30:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4021:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4032:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4017:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4017:18:28"
                              },
                              {
                                "hexValue": "63616e6e6f742073746f7265496e737472756374696f6e7328293a20696e7374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4037:34:28",
                                "type": "",
                                "value": "cannot storeInstructions(): inst"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4010:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4010:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4010:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4092:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4103:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4088:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4088:18:28"
                              },
                              {
                                "hexValue": "72756374696f6e732063616e6e6f7420626520656d707479",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4108:26:28",
                                "type": "",
                                "value": "ructions cannot be empty"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4081:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4081:54:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4081:54:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4144:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4156:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4167:3:28",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4152:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4152:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4144:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_db88129b48afe0554eae149554b1104627b5329ca3ae8dbc11d5f2b4bbbae41a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3908:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3922:4:28",
                        "type": ""
                      }
                    ],
                    "src": "3757:420:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4214:152:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4231:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4234:77:28",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4224:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4224:88:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4224:88:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4328:1:28",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4331:4:28",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4321:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4321:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4321:15:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4352:1:28",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4355:4:28",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4345:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4345:15:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4345:15:28"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "4182:184:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4416:109:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4503:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4512:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4515:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4505:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4505:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4505:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4439:5:28"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4450:5:28"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4457:42:28",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4446:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4446:54:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "4436:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4436:65:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4429:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4429:73:28"
                          },
                          "nodeType": "YulIf",
                          "src": "4426:93:28"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4405:5:28",
                        "type": ""
                      }
                    ],
                    "src": "4371:154:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4600:177:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4646:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4655:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4658:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4648:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4648:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4648:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4621:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4630:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4617:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4617:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4642:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4613:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4613:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "4610:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4671:36:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4697:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4684:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4684:23:28"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4675:5:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4741:5:28"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4716:24:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4716:31:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4716:31:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4756:15:28",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4766:5:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4756:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4566:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4577:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4589:6:28",
                        "type": ""
                      }
                    ],
                    "src": "4530:247:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4832:56:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4866:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4875:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4878:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4868:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4868:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4868:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4855:5:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4862:1:28",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4852:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4852:12:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4845:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4845:20:28"
                          },
                          "nodeType": "YulIf",
                          "src": "4842:40:28"
                        }
                      ]
                    },
                    "name": "validator_revert_enum_Actions",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4821:5:28",
                        "type": ""
                      }
                    ],
                    "src": "4782:106:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4975:182:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5021:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5030:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5033:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5023:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5023:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5023:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4996:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5005:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4992:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4992:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5017:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4988:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4988:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "4985:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5046:36:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5072:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5059:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5059:23:28"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5050:5:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5121:5:28"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_enum_Actions",
                              "nodeType": "YulIdentifier",
                              "src": "5091:29:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5091:36:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5091:36:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5136:15:28",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5146:5:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5136:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_enum$_Actions_$4478",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4941:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4952:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4964:6:28",
                        "type": ""
                      }
                    ],
                    "src": "4893:264:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5242:256:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5288:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5297:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5300:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5290:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5290:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5290:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5263:7:28"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5272:9:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5259:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5259:23:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5284:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5255:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5255:32:28"
                          },
                          "nodeType": "YulIf",
                          "src": "5252:52:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5313:29:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5332:9:28"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5326:5:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5326:16:28"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5317:5:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5452:16:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5461:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5464:1:28",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5454:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5454:12:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5454:12:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5364:5:28"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5375:5:28"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5382:66:28",
                                        "type": "",
                                        "value": "0xffffff0000000000000000000000000000000000000000000000000000000000"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5371:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5371:78:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "5361:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5361:89:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5354:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5354:97:28"
                          },
                          "nodeType": "YulIf",
                          "src": "5351:117:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5477:15:28",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5487:5:28"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5477:6:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes3_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5208:9:28",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5219:7:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5231:6:28",
                        "type": ""
                      }
                    ],
                    "src": "5162:336:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5552:76:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5574:22:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "5576:16:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5576:18:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5576:18:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5568:1:28"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5571:1:28"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5565:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5565:8:28"
                          },
                          "nodeType": "YulIf",
                          "src": "5562:34:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5605:17:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5617:1:28"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5620:1:28"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5613:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5613:9:28"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "5605:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5534:1:28",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5537:1:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "5543:4:28",
                        "type": ""
                      }
                    ],
                    "src": "5503:125:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5807:447:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5824:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5835:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5817:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5817:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5817:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5858:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5869:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5854:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5854:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5874:3:28",
                                "type": "",
                                "value": "136"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5847:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5847:31:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5847:31:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5898:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5909:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5894:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5894:18:28"
                              },
                              {
                                "hexValue": "63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5914:34:28",
                                "type": "",
                                "value": "cannot storeInstructions(): chan"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5887:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5887:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5887:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5969:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5980:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5965:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5965:18:28"
                              },
                              {
                                "hexValue": "67657320746f20746865204578656375746976652073797374656d2028455843",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5985:34:28",
                                "type": "",
                                "value": "ges to the Executive system (EXC"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5958:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5958:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5958:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6040:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6051:3:28",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6036:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6036:19:28"
                              },
                              {
                                "hexValue": "29207265717569726573206368616e67696e67207468652050726f7879206578",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6057:34:28",
                                "type": "",
                                "value": ") requires changing the Proxy ex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6029:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6029:63:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6029:63:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6112:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6123:3:28",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6108:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6108:19:28"
                              },
                              {
                                "hexValue": "6563757469766520617320746865206c6173742073746570206f662074686520",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6129:34:28",
                                "type": "",
                                "value": "ecutive as the last step of the "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6101:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6101:63:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6101:63:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6184:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6195:3:28",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6180:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6180:19:28"
                              },
                              {
                                "hexValue": "70726f706f73616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6201:10:28",
                                "type": "",
                                "value": "proposal"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6173:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6173:39:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6173:39:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6221:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6233:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6244:3:28",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6229:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6229:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6221:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7c75bdcb95f961b5e6146710887afb41aa7d1b8d98dcc9e221b03d500e83051e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5784:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5798:4:28",
                        "type": ""
                      }
                    ],
                    "src": "5633:621:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6433:382:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6450:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6461:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6443:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6443:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6443:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6484:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6495:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6480:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6480:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6500:3:28",
                                "type": "",
                                "value": "111"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6473:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6473:31:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6473:31:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6524:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6535:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6520:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6520:18:28"
                              },
                              {
                                "hexValue": "63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6540:34:28",
                                "type": "",
                                "value": "cannot storeInstructions(): chan"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6513:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6513:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6513:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6595:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6606:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6591:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6591:18:28"
                              },
                              {
                                "hexValue": "676545786563757469766520746172676574206164647265737320646f657320",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6611:34:28",
                                "type": "",
                                "value": "geExecutive target address does "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6584:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6584:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6584:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6666:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6677:3:28",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6662:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6662:19:28"
                              },
                              {
                                "hexValue": "6e6f74206d617463682074686520757067726164656420457865637574697665",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6683:34:28",
                                "type": "",
                                "value": "not match the upgraded Executive"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6655:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6655:63:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6655:63:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6738:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6749:3:28",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6734:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6734:19:28"
                              },
                              {
                                "hexValue": "2073797374656d2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6755:17:28",
                                "type": "",
                                "value": " system address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6727:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6727:46:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6727:46:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6782:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6794:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6805:3:28",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6790:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6790:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6782:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_66189ddadcd60a8f3e10e7ca502ad4dd85dd0a4d705f978b4d93bd4cd98b8998__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6410:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6424:4:28",
                        "type": ""
                      }
                    ],
                    "src": "6259:556:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6955:752:28",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6965:34:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6993:5:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6980:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6980:19:28"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "6969:7:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7038:7:28"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_enum_Actions",
                              "nodeType": "YulIdentifier",
                              "src": "7008:29:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7008:38:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7008:38:28"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7089:168:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7110:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7113:77:28",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7103:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7103:88:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7103:88:28"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7211:1:28",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7214:4:28",
                                      "type": "",
                                      "value": "0x21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7204:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7204:15:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7204:15:28"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7239:1:28",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7242:4:28",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7232:6:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7232:15:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7232:15:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7068:7:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7077:1:28",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7065:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7065:14:28"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7058:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7058:22:28"
                          },
                          "nodeType": "YulIf",
                          "src": "7055:202:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7266:21:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "7282:4:28"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "7276:5:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7276:11:28"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7270:2:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7296:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7310:7:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7319:3:28",
                                "type": "",
                                "value": "255"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7306:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7306:17:28"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "7300:2:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "7339:4:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7352:2:28"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7356:66:28",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7348:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7348:75:28"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7425:2:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "7345:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7345:83:28"
                              }
                            ],
                            "functionName": {
                              "name": "sstore",
                              "nodeType": "YulIdentifier",
                              "src": "7332:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7332:97:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7332:97:28"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7438:43:28",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7470:5:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7477:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7466:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7466:14:28"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7453:12:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7453:28:28"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "7442:7:28",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "7515:7:28"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7490:24:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7490:33:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7490:33:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "7539:4:28"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7555:2:28"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7559:66:28",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffff000000000000000000000000000000000000000000"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "7551:3:28"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7551:75:28"
                                      },
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7628:2:28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "or",
                                      "nodeType": "YulIdentifier",
                                      "src": "7548:2:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7548:83:28"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7641:1:28",
                                            "type": "",
                                            "value": "8"
                                          },
                                          {
                                            "name": "value_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "7644:7:28"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7637:3:28"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7637:15:28"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7654:44:28",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7633:3:28"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7633:66:28"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "7545:2:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7545:155:28"
                              }
                            ],
                            "functionName": {
                              "name": "sstore",
                              "nodeType": "YulIdentifier",
                              "src": "7532:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7532:169:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7532:169:28"
                        }
                      ]
                    },
                    "name": "update_storage_value_offset_0t_struct$_Instruction_$4484_calldata_ptr_to_t_struct$_Instruction_$4484_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "6938:4:28",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6944:5:28",
                        "type": ""
                      }
                    ],
                    "src": "6820:887:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7759:148:28",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7850:22:28",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "7852:16:28"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7852:18:28"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7852:18:28"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7775:5:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7782:66:28",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "7772:2:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7772:77:28"
                          },
                          "nodeType": "YulIf",
                          "src": "7769:103:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7881:20:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7892:5:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7899:1:28",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7888:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7888:13:28"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "7881:3:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7741:5:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "7751:3:28",
                        "type": ""
                      }
                    ],
                    "src": "7712:195:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8086:243:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8103:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8114:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8096:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8096:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8096:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8137:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8148:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8133:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8133:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8153:2:28",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8126:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8126:30:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8126:30:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8176:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8187:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8172:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8172:18:28"
                              },
                              {
                                "hexValue": "63616e6e6f742065786563757465496e737472756374696f6e7328293a207072",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8192:34:28",
                                "type": "",
                                "value": "cannot executeInstructions(): pr"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8165:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8165:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8165:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8247:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8258:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8243:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8243:18:28"
                              },
                              {
                                "hexValue": "6f706f73616c20646f6573206e6f74206578697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8263:23:28",
                                "type": "",
                                "value": "oposal does not exist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8236:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8236:51:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8236:51:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8296:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8308:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8319:3:28",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8304:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8304:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8296:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7e7504631ad7c7a00bca8e109b434d988c97d128820e886586e001157698984f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8063:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8077:4:28",
                        "type": ""
                      }
                    ],
                    "src": "7912:417:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8508:250:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8525:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8536:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8518:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8518:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8518:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8559:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8570:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8555:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8555:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8575:2:28",
                                "type": "",
                                "value": "60"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8548:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8548:30:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8548:30:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8598:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8609:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8594:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8594:18:28"
                              },
                              {
                                "hexValue": "63616e6e6f742073746f7265496e737472756374696f6e7328293a2074617267",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8614:34:28",
                                "type": "",
                                "value": "cannot storeInstructions(): targ"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8587:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8587:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8587:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8669:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8680:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8665:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8665:18:28"
                              },
                              {
                                "hexValue": "65742061646472657373206973206e6f74206120636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8685:30:28",
                                "type": "",
                                "value": "et address is not a contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8658:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8658:58:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8658:58:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8725:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8737:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8748:3:28",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8733:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8733:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8725:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24a9da6747aa4100740d1720f6949baf3a66a27e52c7fba642982cc0492d1325__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8485:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8499:4:28",
                        "type": ""
                      }
                    ],
                    "src": "8334:424:28"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8937:234:28",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8954:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8965:2:28",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8947:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8947:21:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8947:21:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8988:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8999:2:28",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8984:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8984:18:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9004:2:28",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8977:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8977:30:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8977:30:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9027:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9038:2:28",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9023:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9023:18:28"
                              },
                              {
                                "hexValue": "2063616e6e6f742073746f7265496e737472756374696f6e7328293a20696e76",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9043:34:28",
                                "type": "",
                                "value": " cannot storeInstructions(): inv"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9016:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9016:62:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9016:62:28"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9098:9:28"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9109:2:28",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9094:3:28"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9094:18:28"
                              },
                              {
                                "hexValue": "616c6964206b6579636f6465",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9114:14:28",
                                "type": "",
                                "value": "alid keycode"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9087:6:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9087:42:28"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9087:42:28"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9138:27:28",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9150:9:28"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9161:3:28",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9146:3:28"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9146:19:28"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9138:4:28"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_15178d8ba4c75f9e599cef95f9266d4998fd4cbc008ef0161996289b16349fe7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8914:9:28",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8928:4:28",
                        "type": ""
                      }
                    ],
                    "src": "8763:408:28"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_struct$_Instruction_$4484_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(6, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes3__to_t_bytes3__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffff0000000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Actions_$4478_t_address__to_t_uint8_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        if iszero(lt(value0, 5))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_Proxy_$4866__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_74c927f00ac5c51749b57f85942033fedac295d0a8fd00d4de835d9d35b5f244__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 59)\n        mstore(add(headStart, 64), \"onlyPolicy(): only approved poli\")\n        mstore(add(headStart, 96), \"cies can call this function\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_db88129b48afe0554eae149554b1104627b5329ca3ae8dbc11d5f2b4bbbae41a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"cannot storeInstructions(): inst\")\n        mstore(add(headStart, 96), \"ructions cannot be empty\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function validator_revert_enum_Actions(value)\n    {\n        if iszero(lt(value, 5)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_enum$_Actions_$4478(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_enum_Actions(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes3_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffff0000000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_7c75bdcb95f961b5e6146710887afb41aa7d1b8d98dcc9e221b03d500e83051e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 136)\n        mstore(add(headStart, 64), \"cannot storeInstructions(): chan\")\n        mstore(add(headStart, 96), \"ges to the Executive system (EXC\")\n        mstore(add(headStart, 128), \") requires changing the Proxy ex\")\n        mstore(add(headStart, 160), \"ecutive as the last step of the \")\n        mstore(add(headStart, 192), \"proposal\")\n        tail := add(headStart, 224)\n    }\n    function abi_encode_tuple_t_stringliteral_66189ddadcd60a8f3e10e7ca502ad4dd85dd0a4d705f978b4d93bd4cd98b8998__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 111)\n        mstore(add(headStart, 64), \"cannot storeInstructions(): chan\")\n        mstore(add(headStart, 96), \"geExecutive target address does \")\n        mstore(add(headStart, 128), \"not match the upgraded Executive\")\n        mstore(add(headStart, 160), \" system address\")\n        tail := add(headStart, 192)\n    }\n    function update_storage_value_offset_0t_struct$_Instruction_$4484_calldata_ptr_to_t_struct$_Instruction_$4484_storage(slot, value)\n    {\n        let value_1 := calldataload(value)\n        validator_revert_enum_Actions(value_1)\n        if iszero(lt(value_1, 5))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        let _1 := sload(slot)\n        let _2 := and(value_1, 255)\n        sstore(slot, or(and(_1, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), _2))\n        let value_2 := calldataload(add(value, 32))\n        validator_revert_address(value_2)\n        sstore(slot, or(or(and(_1, 0xffffffffffffffffffffff000000000000000000000000000000000000000000), _2), and(shl(8, value_2), 0xffffffffffffffffffffffffffffffffffffffff00)))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_7e7504631ad7c7a00bca8e109b434d988c97d128820e886586e001157698984f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"cannot executeInstructions(): pr\")\n        mstore(add(headStart, 96), \"oposal does not exist\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24a9da6747aa4100740d1720f6949baf3a66a27e52c7fba642982cc0492d1325__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 60)\n        mstore(add(headStart, 64), \"cannot storeInstructions(): targ\")\n        mstore(add(headStart, 96), \"et address is not a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_15178d8ba4c75f9e599cef95f9266d4998fd4cbc008ef0161996289b16349fe7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \" cannot storeInstructions(): inv\")\n        mstore(add(headStart, 96), \"alid keycode\")\n        tail := add(headStart, 128)\n    }\n}",
              "id": 28,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EAADFC7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6EAADFC7 EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x85E0D8AD EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x8BA639A4 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0xCC2EFFDC EQ PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18DC0DE7 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x1AE7EC2E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x2CE21901 EQ PUSH2 0xD6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4558430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9F JUMP JUMPDEST PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x833 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE9 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xFD3 JUMP JUMPDEST PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9F SWAP3 SWAP2 SWAP1 PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x13D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH2 0x297 SWAP2 SWAP1 PUSH2 0x10DC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP4 PUSH2 0x335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A20696E7374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756374696F6E732063616E6E6F7420626520656D7074790000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x372 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x355 JUMPI PUSH2 0x355 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x386 JUMPI PUSH2 0x386 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x39C SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3AD JUMPI PUSH2 0x3AD PUSH2 0xFF5 JUMP JUMPDEST EQ DUP1 PUSH2 0x3F1 JUMPI POP PUSH1 0x1 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x3C8 JUMPI PUSH2 0x3C8 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x3DE SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3EF JUMPI PUSH2 0x3EF PUSH2 0xFF5 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x78E JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x40A JUMPI PUSH2 0x40A PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1AE7EC2E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x118F JUMP JUMPDEST SWAP1 POP PUSH2 0x49B DUP2 PUSH2 0xDEC JUMP JUMPDEST PUSH32 0x4558430000000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP3 AND EQ ISZERO PUSH2 0x78C JUMPI PUSH1 0x4 DUP8 DUP8 PUSH2 0x4F4 PUSH1 0x1 DUP3 PUSH2 0x11D1 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x519 SWAP3 PUSH1 0x20 PUSH1 0x40 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x1172 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52A JUMPI PUSH2 0x52A PUSH2 0xFF5 JUMP JUMPDEST EQ PUSH2 0x629 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x88 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A206368616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x67657320746F20746865204578656375746976652073797374656D2028455843 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x29207265717569726573206368616E67696E67207468652050726F7879206578 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x6563757469766520617320746865206C6173742073746570206F662074686520 PUSH1 0xA4 DUP3 ADD MSTORE PUSH32 0x70726F706F73616C000000000000000000000000000000000000000000000000 PUSH1 0xC4 DUP3 ADD MSTORE PUSH1 0xE4 ADD PUSH2 0x27D JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x63B JUMPI PUSH2 0x63B PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 PUSH2 0x676 PUSH1 0x1 DUP3 PUSH2 0x11D1 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x685 JUMPI PUSH2 0x685 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MUL ADD PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A206368616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x676545786563757469766520746172676574206164647265737320646F657320 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6E6F74206D617463682074686520757067726164656420457865637574697665 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x2073797374656D20616464726573730000000000000000000000000000000000 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 ADD PUSH2 0x27D JUMP JUMPDEST POP JUMPDEST DUP2 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x7A1 JUMPI PUSH2 0x7A1 PUSH2 0x10F4 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 DUP2 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 SWAP1 SWAP5 KECCAK256 PUSH1 0x40 SWAP1 SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 POP PUSH2 0x7CD DUP3 DUP3 PUSH2 0x11E8 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x7DA SWAP1 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x338 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x7F3 DUP4 PUSH2 0x12B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x786456549A8048FC360B44D675C164244436EF1E5048C3AECEA4D160400FD001 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x9ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742065786563757465496E737472756374696F6E7328293A207072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F706F73616C20646F6573206E6F742065786973740000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC4D1F8F1 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xA2F JUMPI PUSH2 0xA2F PUSH2 0x10F4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP5 SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xA55 JUMPI PUSH2 0xA55 PUSH2 0x10F4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP2 MSTORE PUSH2 0xAB6 SWAP3 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x4 ADD PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xAF3 SWAP1 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9F0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xDFDED950FEF0D7666005E810DD1BFAB64A4D9E8BC53D3ABE31C2CF7268D3D823 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1D10FC6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x1D10FC64 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xC51 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C79506F6C69637928293A206F6E6C7920617070726F76656420706F6C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636965732063616E2063616C6C20746869732066756E6374696F6E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x1339C2100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0x1339C21 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xFA7FCC389A8DD8946810C44EABA79476EBDA5FFA11280A99BD7FBEF680336EC7 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xD01 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xFF DUP2 AND SWAP3 POP PUSH2 0x100 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST DUP1 EXTCODESIZE DUP1 PUSH2 0xDE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742073746F7265496E737472756374696F6E7328293A2074617267 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65742061646472657373206973206E6F74206120636F6E747261637400000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xDE8 JUMPI PUSH1 0x0 DUP3 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0xE0C JUMPI PUSH2 0xE0C PUSH2 0x10F4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL SWAP1 POP PUSH32 0x4100000000000000000000000000000000000000000000000000000000000000 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND LT DUP1 ISZERO SWAP1 PUSH2 0xEA6 JUMPI POP PUSH32 0x5A00000000000000000000000000000000000000000000000000000000000000 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND GT ISZERO JUMPDEST PUSH2 0xF32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x2063616E6E6F742073746F7265496E737472756374696F6E7328293A20696E76 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206B6579636F64650000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x27D JUMP JUMPDEST POP DUP1 PUSH2 0xF3D DUP2 PUSH2 0x12B1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x6 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x5 DUP5 LT PUSH2 0x105F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x10EF JUMPI PUSH2 0x10EF PUSH2 0x10AD JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10A6 DUP2 PUSH2 0x1123 JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x1145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10A6 DUP2 PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x11E3 JUMPI PUSH2 0x11E3 PUSH2 0x10AD JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11F3 DUP2 PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x122A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH1 0xFF DUP3 AND SWAP2 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND OR DUP4 SSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1267 DUP2 PUSH2 0x1123 JUMP JUMPDEST PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 PUSH1 0x8 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 DUP5 AND OR OR DUP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x12E3 JUMPI PUSH2 0x12E3 PUSH2 0x10AD JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x2306B7E9458CBAAF143DE007E1EB64664A8A3FB3216DA31316011629E6293864 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
          "sourceMap": "130:3895:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1678:1351;;;;;;:::i;:::-;;:::i;:::-;;;811:25:28;;;799:2;784:18;1678:1351:22;;;;;;;;498:76;;;559:12;991:98:28;;979:2;964:18;498:76:22;847:248:28;3033:428:22;;;;;;:::i;:::-;;:::i;:::-;;1057:32;;;;;;1562:111;;;:::i;1093:59::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;85:19:21:-;;;;;;;;;;;;2439:42:28;2427:55;;;2409:74;;2397:2;2382:18;85:19:21;2249:240:28;1678:1351:22;1771:7;282:6:21;;:37;;;;;307:10;282:37;;;2409:74:28;282:6:21;;;;;:23;;2382:18:28;;282:37:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;273:110;;;;;;;3209:2:28;273:110:21;;;3191:21:28;3248:2;3228:18;;;3221:30;3287:34;3267:18;;;3260:62;3358:29;3338:18;;;3331:57;3405:19;;273:110:21;;;;;;;;;1786:22:22::1;1811:17;;1831:1;1811:21;;;;:::i;:::-;1838:34;1875::::0;;;:18:::1;:34;::::0;;;;1786:46;;-1:-1:-1;1924:24:22;1916:93:::1;;;::::0;::::1;::::0;;3959:2:28;1916:93:22::1;::::0;::::1;3941:21:28::0;3998:2;3978:18;;;3971:30;4037:34;4017:18;;;4010:62;4108:26;4088:18;;;4081:54;4152:19;;1916:93:22::1;3757:420:28::0;1916:93:22::1;2042:6;2038:888;2052:22:::0;;::::1;2038:888;;;2090:40;2106:13;;2120:1;2106:16;;;;;;;:::i;:::-;;;;;;:23;;;;;;;;;;:::i;:::-;2090:15;:40::i;:::-;2169:21;2142:13;;2156:1;2142:16;;;;;;;:::i;:::-;:23;::::0;::::1;:16;::::0;;::::1;;:23:::0;;::::1;::::0;-1:-1:-1;2142:23:22::1;:::i;:::-;:48;;;;;;;;:::i;:::-;;:100;;;-1:-1:-1::0;2221:21:22::1;2194:13;;2208:1;2194:16;;;;;;;:::i;:::-;:23;::::0;::::1;:16;::::0;;::::1;;:23:::0;;::::1;::::0;-1:-1:-1;2194:23:22::1;:::i;:::-;:48;;;;;;;;:::i;:::-;;2142:100;2138:739;;;2254:14;2278:13;;2292:1;2278:16;;;;;;;:::i;:::-;;;;;;:23;;;;;;;;;;:::i;:::-;2271:39;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2254:58;;2322:28;2342:7;2322:19;:28::i;:::-;2364:16;::::0;;::::1;;2360:509;;;2450:23;2402:13:::0;;2416:22:::1;2437:1;2402:13:::0;2416:22:::1;:::i;:::-;2402:37;;;;;;;:::i;:::-;:44;::::0;::::1;:37;::::0;;::::1;;:44:::0;;::::1;::::0;-1:-1:-1;2402:44:22::1;:::i;:::-;:71;;;;;;;;:::i;:::-;;2394:239;;;::::0;::::1;::::0;;5835:2:28;2394:239:22::1;::::0;::::1;5817:21:28::0;5874:3;5854:18;;;5847:31;5914:34;5894:18;;;5887:62;5985:34;5965:18;;;5958:62;6057:34;6036:19;;;6029:63;6129:34;6108:19;;;6101:63;6201:10;6180:19;;;6173:39;6229:19;;2394:239:22::1;5633:621:28::0;2394:239:22::1;2701:13;;2715:1;2701:16;;;;;;;:::i;:::-;;;;;;:23;;;;;;;;;;:::i;:::-;2653:71;;:13:::0;;2667:22:::1;2688:1;2653:13:::0;2667:22:::1;:::i;:::-;2653:37;;;;;;;:::i;:::-;;;;;;:44;;;;;;;;;;:::i;:::-;:71;;;2645:213;;;::::0;::::1;::::0;;6461:2:28;2645:213:22::1;::::0;::::1;6443:21:28::0;6500:3;6480:18;;;6473:31;6540:34;6520:18;;;6513:62;6611:34;6591:18;;;6584:62;6683:34;6662:19;;;6655:63;6755:17;6734:19;;;6727:46;6790:19;;2645:213:22::1;6259:556:28::0;2645:213:22::1;2244:633;2138:739;2884:12;2902:13;;2916:1;2902:16;;;;;;;:::i;:::-;2884:35:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;2884:35:22;;;::::1;::::0;;;2902:16:::1;::::0;;::::1;::::0;;;::::1;::::0;2884:35;;;::::1;::::0;-1:-1:-1;2884:35:22::1;2902:16:::0;2884:35;::::1;:::i;:::-;;;2076:3;;;;;:::i;:::-;;;;2038:888;;;-1:-1:-1::0;2931:17:22::1;:19:::0;;;:17:::1;:19;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;2962:34:22::1;::::0;811:25:28;;;2962:34:22::1;::::0;799:2:28;784:18;2962:34:22::1;;;;;;;-1:-1:-1::0;3010:14:22;1678:1351;-1:-1:-1;;;1678:1351:22:o;3033:428::-;282:6:21;;:37;;;;;307:10;282:37;;;2409:74:28;282:6:21;;;;;:23;;2382:18:28;;282:37:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;273:110;;;;;;;3209:2:28;273:110:21;;;3191:21:28;3248:2;3228:18;;;3221:30;3287:34;3267:18;;;3260:62;3358:29;3338:18;;;3331:57;3405:19;;273:110:21;3007:423:28;273:110:21;3113:30:22::1;3146:35:::0;;;:18:::1;:35;::::0;;;;3196:15;;3188:85:::1;;;::::0;::::1;::::0;;8114:2:28;3188:85:22::1;::::0;::::1;8096:21:28::0;8153:2;8133:18;;;8126:30;8192:34;8172:18;;;8165:62;8263:23;8243:18;;;8236:51;8304:19;;3188:85:22::1;7912:417:28::0;3188:85:22::1;3284:9;3280:128;3302:15:::0;;3297:20;::::1;3280:128;;;3335:6;::::0;3356:14;;3335:6:::1;::::0;;::::1;::::0;:20:::1;::::0;3356:8;;3365:4;;3356:14;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;:21:::0;3379:14;;3356:21:::1;::::0;;::::1;::::0;3379:8;;3388:4;;3379:14;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;:21:::0;3335:66:::1;::::0;::::1;::::0;;;;;;;::::1;::::0;;3379:21:::1;::::0;::::1;;;::::0;3335:66:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3319:6;;;;;:::i;:::-;;;;3280:128;;;-1:-1:-1::0;3419:37:22::1;::::0;811:25:28;;;3419:37:22::1;::::0;799:2:28;784:18;3419:37:22::1;;;;;;;3107:354;3033:428:::0;:::o;1562:111::-;282:6:21;;:37;;;;;307:10;282:37;;;2409:74:28;282:6:21;;;;;:23;;2382:18:28;;282:37:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;273:110;;;;;;;3209:2:28;273:110:21;;;3191:21:28;3248:2;3228:18;;;3221:30;3287:34;3267:18;;;3260:62;3358:29;3338:18;;;3331:57;3405:19;;273:110:21;3007:423:28;273:110:21;1611:6:22::1;::::0;;:15:::1;::::0;;;;;;;:6:::1;::::0;;::::1;::::0;:13:::1;::::0;:15:::1;::::0;;::::1;::::0;;;;;;:6;;:15;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1638:30;1652:15;1638:30;;;;811:25:28::0;;799:2;784:18;;665:177;1638:30:22::1;;;;;;;;1562:111::o:0;1093:59::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1093:59:22;;;;;;-1:-1:-1;1093:59:22;:::o;3556:212::-;3655:20;;3690:8;3682:81;;;;;;;8536:2:28;3682:81:22;;;8518:21:28;8575:2;8555:18;;;8548:30;8614:34;8594:18;;;8587:62;8685:30;8665:18;;;8658:58;8733:19;;3682:81:22;8334:424:28;3682:81:22;3612:156;3556:212;:::o;3773:250::-;3843:9;3838:181;3862:1;3858;:5;3838:181;;;3880:11;3894:7;3902:1;3894:10;;;;;;;:::i;:::-;;;;;-1:-1:-1;3922:12:22;;;;;;;;:28;;-1:-1:-1;3938:12:22;;;;;;3922:28;3914:85;;;;;;;8965:2:28;3914:85:22;;;8947:21:28;9004:2;8984:18;;;8977:30;9043:34;9023:18;;;9016:62;9114:14;9094:18;;;9087:42;9146:19;;3914:85:22;8763:408:28;3914:85:22;-1:-1:-1;3865:3:22;;;;:::i;:::-;;;;3838:181;;14:646:28;131:6;139;192:2;180:9;171:7;167:23;163:32;160:52;;;208:1;205;198:12;160:52;248:9;235:23;277:18;318:2;310:6;307:14;304:34;;;334:1;331;324:12;304:34;372:6;361:9;357:22;347:32;;417:7;410:4;406:2;402:13;398:27;388:55;;439:1;436;429:12;388:55;479:2;466:16;505:2;497:6;494:14;491:34;;;521:1;518;511:12;491:34;574:7;569:2;559:6;556:1;552:14;548:2;544:23;540:32;537:45;534:65;;;595:1;592;585:12;534:65;626:2;618:11;;;;;648:6;;-1:-1:-1;14:646:28;;-1:-1:-1;;;;14:646:28:o;1100:180::-;1159:6;1212:2;1200:9;1191:7;1187:23;1183:32;1180:52;;;1228:1;1225;1218:12;1180:52;-1:-1:-1;1251:23:28;;1100:180;-1:-1:-1;1100:180:28:o;1285:248::-;1353:6;1361;1414:2;1402:9;1393:7;1389:23;1385:32;1382:52;;;1430:1;1427;1420:12;1382:52;-1:-1:-1;;1453:23:28;;;1523:2;1508:18;;;1495:32;;-1:-1:-1;1285:248:28:o;1538:184::-;1590:77;1587:1;1580:88;1687:4;1684:1;1677:15;1711:4;1708:1;1701:15;1727:517;1899:2;1884:18;;1932:1;1921:13;;1911:201;;1968:77;1965:1;1958:88;2069:4;2066:1;2059:15;2097:4;2094:1;2087:15;1911:201;2121:25;;;2194:42;2182:55;;;;2177:2;2162:18;;;2155:83;1727:517;:::o;2725:277::-;2792:6;2845:2;2833:9;2824:7;2820:23;2816:32;2813:52;;;2861:1;2858;2851:12;2813:52;2893:9;2887:16;2946:5;2939:13;2932:21;2925:5;2922:32;2912:60;;2968:1;2965;2958:12;2912:60;2991:5;2725:277;-1:-1:-1;;;2725:277:28:o;3435:184::-;3487:77;3484:1;3477:88;3584:4;3581:1;3574:15;3608:4;3605:1;3598:15;3624:128;3664:3;3695:1;3691:6;3688:1;3685:13;3682:39;;;3701:18;;:::i;:::-;-1:-1:-1;3737:9:28;;3624:128::o;4182:184::-;4234:77;4231:1;4224:88;4331:4;4328:1;4321:15;4355:4;4352:1;4345:15;4371:154;4457:42;4450:5;4446:54;4439:5;4436:65;4426:93;;4515:1;4512;4505:12;4426:93;4371:154;:::o;4530:247::-;4589:6;4642:2;4630:9;4621:7;4617:23;4613:32;4610:52;;;4658:1;4655;4648:12;4610:52;4697:9;4684:23;4716:31;4741:5;4716:31;:::i;4782:106::-;4862:1;4855:5;4852:12;4842:40;;4878:1;4875;4868:12;4893:264;4964:6;5017:2;5005:9;4996:7;4992:23;4988:32;4985:52;;;5033:1;5030;5023:12;4985:52;5072:9;5059:23;5091:36;5121:5;5091:36;:::i;5162:336::-;5231:6;5284:2;5272:9;5263:7;5259:23;5255:32;5252:52;;;5300:1;5297;5290:12;5252:52;5332:9;5326:16;5382:66;5375:5;5371:78;5364:5;5361:89;5351:117;;5464:1;5461;5454:12;5503:125;5543:4;5571:1;5568;5565:8;5562:34;;;5576:18;;:::i;:::-;-1:-1:-1;5613:9:28;;5503:125::o;6820:887::-;6993:5;6980:19;7008:38;7038:7;7008:38;:::i;:::-;7077:1;7068:7;7065:14;7055:202;;7113:77;7110:1;7103:88;7214:4;7211:1;7204:15;7242:4;7239:1;7232:15;7055:202;7282:4;7276:11;7319:3;7310:7;7306:17;7296:27;;7425:2;7356:66;7352:2;7348:75;7345:83;7339:4;7332:97;7477:2;7470:5;7466:14;7453:28;7490:33;7515:7;7490:33;:::i;:::-;7654:44;7644:7;7641:1;7637:15;7633:66;7628:2;7559:66;7555:2;7551:75;7548:83;7545:155;7539:4;7532:169;;;;6820:887;;:::o;7712:195::-;7751:3;7782:66;7775:5;7772:77;7769:103;;;7852:18;;:::i;:::-;-1:-1:-1;7899:1:28;7888:13;;7712:195::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "979200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "KEYCODE()": "200",
            "_proxy()": "2379",
            "executeInstructions(uint256)": "infinite",
            "launchProxy()": "infinite",
            "storeInstructions((uint8,address)[])": "infinite",
            "storedInstructions(uint256,uint256)": "4819",
            "totalInstructions()": "2284"
          },
          "internal": {
            "_ensureContract(address)": "infinite",
            "_ensureValidKeycode(bytes3)": "infinite"
          }
        },
        "methodIdentifiers": {
          "KEYCODE()": "1ae7ec2e",
          "_proxy()": "cc2effdc",
          "executeInstructions(uint256)": "2ce21901",
          "launchProxy()": "85e0d8ad",
          "storeInstructions((uint8,address)[])": "18dc0de7",
          "storedInstructions(uint256,uint256)": "8ba639a4",
          "totalInstructions()": "6eaadfc7"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"proxy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instructionsId\",\"type\":\"uint256\"}],\"name\":\"InstructionsExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instructionsId\",\"type\":\"uint256\"}],\"name\":\"InstructionsStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProxyLaunched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KEYCODE\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instructionsId_\",\"type\":\"uint256\"}],\"name\":\"executeInstructions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Actions\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"internalType\":\"struct Instruction[]\",\"name\":\"instructions_\",\"type\":\"tuple[]\"}],\"name\":\"storeInstructions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storedInstructions\",\"outputs\":[{\"internalType\":\"enum Actions\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInstructions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Systems/EXC.sol\":\"Executive\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\ncontract System {\\n    Proxy public _proxy;\\n\\n\\n    constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n    }\\n\\n\\n    function KEYCODE() external pure virtual returns (bytes3) {}\\n\\n\\n    modifier onlyPolicy {\\n        require (_proxy.approvedPolicies( msg.sender ), \\\"onlyPolicy(): only approved policies can call this function\\\");\\n        _;\\n    }\\n}\\n\\n\\ncontract Policy {\\n  Proxy public _proxy;\\n\\n\\n  constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n  }\\n\\n\\n  function requireSystem(bytes3 keycode_) internal view returns (address) {\\n    address systemForKeycode = _proxy.getSystemForKeycode(keycode_);\\n\\n    require(systemForKeycode != address(0), \\\"cannot _requireSytem(): system does not exist\\\" );\\n\\n    return systemForKeycode;\\n  }\\n\\n\\n  function configureSystems() virtual external onlyProxy {}\\n\\n\\n  modifier onlyProxy {\\n    require (msg.sender == address(_proxy), \\\"onlyProxy(): only the Proxy can call this function\\\");\\n    _;\\n  }\\n\\n}\\n\\n\\nenum Actions {\\n  InstallSystem,\\n  UpgradeSystem,\\n  ApprovePolicy,\\n  TerminatePolicy,\\n  ChangeExecutive\\n}\\n\\n\\nstruct Instruction {\\n  Actions action;\\n  address target;\\n}\\n\\n\\ncontract Proxy{\\n\\n  address public executive; \\n\\n  constructor() {\\n    executive = msg.sender;\\n  }\\n  \\n  modifier onlyExecutive() {\\n    require ( msg.sender == executive, \\\"onlyExecutive(): only the assigned executive can call the function\\\" );\\n    _;\\n  }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  //                                  EPOCH STUFF                                    //\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  \\n\\n  uint256 public startingEpochTimestamp; \\n  uint256 public constant epochLength = 60 * 60 * 24 * 7; // number of seconds in a week\\n  bool public isLaunched;\\n\\n\\n  function currentEpoch() public view returns (uint256) {\\n    if ( isLaunched == true && block.timestamp >= startingEpochTimestamp ) {\\n      return (( block.timestamp - startingEpochTimestamp ) / epochLength ) + 1;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function launch() external onlyExecutive {\\n    require (isLaunched == false, \\\"cannot launch(): Proxy is already launched\\\");\\n    startingEpochTimestamp = epochLength * (( block.timestamp / epochLength ) + 1 );\\n    isLaunched = true;\\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                                 DEPENDENCY MANAGEMENT                             //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(bytes3 => address) public getSystemForKeycode; // get contract for system keycode\\n  mapping(address => bytes3) public getKeycodeForSystem; // get system keycode for contract\\n  mapping(address => bool) public approvedPolicies; // whitelisted apps\\n  address[] public allPolicies;\\n\\n  event ActionExecuted(Actions action, address target);\\n  event AllPoliciesReconfigured(uint16 currentEpoch);\\n\\n  \\n  function executeAction(Actions action_, address target_) external onlyExecutive {\\n    if (action_ == Actions.InstallSystem) {\\n      _installSystem(target_); \\n\\n    } else if (action_ == Actions.UpgradeSystem) {\\n      _upgradeSystem(target_); \\n\\n    } else if (action_ == Actions.ApprovePolicy) {\\n      _approvePolicy(target_); \\n\\n    } else if (action_ == Actions.TerminatePolicy) {\\n      _terminatePolicy(target_); \\n    \\n    } else if (action_ == Actions.ChangeExecutive) {\\n      // require Proxy to install the executive system before calling ChangeExecutive on it\\n      require(getKeycodeForSystem[target_] == \\\"EXC\\\", \\\"cannot changeExecutive(): target is not the Executive system\\\");\\n      executive = target_;\\n    }\\n\\n    emit ActionExecuted(action_, target_);\\n  }\\n\\n\\n  function _installSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    \\n    // @NOTE check newSystem_ != 0\\n    require( getSystemForKeycode[keycode] == address(0), \\\"cannot _installSystem(): Existing system found for keycode\\\");\\n\\n    getSystemForKeycode[keycode] = newSystem_;\\n    getKeycodeForSystem[newSystem_] = keycode;\\n  }\\n\\n\\n  function _upgradeSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    address oldSystem = getSystemForKeycode[keycode];\\n    \\n    require(oldSystem != address(0) && oldSystem != newSystem_, \\\"cannot _upgradeSystem(): an existing system must be upgraded to a new system\\\");\\n\\n    getKeycodeForSystem[oldSystem] = bytes3(0);\\n    getKeycodeForSystem[newSystem_] = keycode;\\n    getSystemForKeycode[keycode] = newSystem_;\\n\\n    _reconfigurePolicies();\\n  }\\n\\n\\n  function _approvePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == false, \\\"cannot _approvePolicy(): Policy is already approved\\\" );\\n\\n    approvedPolicies[policy_] = true;\\n    \\n    allPolicies.push(policy_);\\n    Policy(policy_).configureSystems();\\n  }\\n\\n  function _terminatePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == true, \\\"cannot _terminatePolicy(): Policy is not approved\\\" );\\n    \\n    approvedPolicies[policy_] = false;\\n  }\\n\\n\\n  function _reconfigurePolicies() internal {\\n    for (uint i=0; i<allPolicies.length; i++) {\\n      address policy_ = allPolicies[i];\\n      if (approvedPolicies[policy_]) {\\n        Policy(policy_).configureSystems();\\n      }\\n    }\\n  }\\n}\\n\\n\\n\",\"keccak256\":\"0xcd12a205dfb8aa67849b69aa505c9b29cd8162d118672df21890d605c10972bb\",\"license\":\"GPL-2.0\"},\"contracts/Systems/EXC.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.11;\\n// EXE is the execution engine for the OS.\\n\\nimport \\\"../Proxy.sol\\\";\\n\\ncontract Executive is System {\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                           Proxy Proxy Configuration                         //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  constructor(Proxy proxy_) System(proxy_) {\\n    // instructionsForId[0];\\n  }\\n\\n  function KEYCODE() external pure override returns (bytes3) { return \\\"EXC\\\"; }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                              System Variables                               //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  /* imported from Proxy.sol\\n\\n  enum Actions {\\n    ChangeExecutive,\\n    ApprovePolicy,\\n    TerminatePolicy,\\n    InstallSystem,\\n    UpgradeSystem\\n  }\\n\\n  struct Instruction {\\n    Actions action;\\n    address target;\\n  }\\n\\n  */\\n\\n  uint256 public totalInstructions;\\n  mapping(uint256 => Instruction[]) public storedInstructions;\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                             Policy Interface                                //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  event ProxyLaunched(uint256 timestamp);\\n  event InstructionsStored(uint256 instructionsId);\\n  event InstructionsExecuted(uint256 instructionsId);\\n\\n\\n  function launchProxy() external onlyPolicy {\\n    _proxy.launch();\\n\\n    emit ProxyLaunched(block.timestamp);\\n  }\\n\\n\\n  function storeInstructions(Instruction[] calldata instructions_) external onlyPolicy returns(uint256) {\\n    uint256 instructionsId = totalInstructions + 1;\\n    Instruction[] storage instructions = storedInstructions[instructionsId];\\n\\n    require(instructions_.length > 0, \\\"cannot storeInstructions(): instructions cannot be empty\\\");\\n\\n    // @TODO use u256\\n    for(uint i=0; i<instructions_.length; i++) { \\n      _ensureContract(instructions_[i].target);\\n      if (instructions_[i].action == Actions.InstallSystem || instructions_[i].action == Actions.UpgradeSystem) {\\n        bytes3 keycode = System(instructions_[i].target).KEYCODE();\\n        _ensureValidKeycode(keycode);\\n        if (keycode == \\\"EXC\\\") {\\n          require(instructions_[instructions_.length-1].action == Actions.ChangeExecutive, \\n                  \\\"cannot storeInstructions(): changes to the Executive system (EXC) requires changing the Proxy executive as the last step of the proposal\\\");\\n          require(instructions_[instructions_.length-1].target == instructions_[i].target,\\n                  \\\"cannot storeInstructions(): changeExecutive target address does not match the upgraded Executive system address\\\");\\n        }\\n      }\\n      instructions.push(instructions_[i]);\\n    }\\n    totalInstructions++;\\n\\n    emit InstructionsStored(instructionsId);\\n\\n    return instructionsId;\\n  }\\n\\n  function executeInstructions(uint256 instructionsId_) external onlyPolicy {\\n    Instruction[] storage proposal = storedInstructions[instructionsId_];\\n\\n    require(proposal.length > 0, \\\"cannot executeInstructions(): proposal does not exist\\\");\\n\\n    for(uint step=0; step<proposal.length; step++) {\\n      _proxy.executeAction(proposal[step].action, proposal[step].target);\\n    }\\n\\n    emit InstructionsExecuted(instructionsId_);\\n  }\\n  \\n\\n  /////////////////////////////// INTERNAL FUNCTIONS ////////////////////////////////\\n\\n\\n  function _ensureContract(address target_) internal view {\\n    uint256 size;\\n    assembly { size := extcodesize(target_) }\\n    require(size > 0, \\\"cannot storeInstructions(): target address is not a contract\\\");\\n  }\\n\\n\\n  function _ensureValidKeycode(bytes3 keycode) internal pure {\\n    for (uint256 i = 0; i < 3; i++) {\\n        bytes1 char = keycode[i];\\n        require(char >= 0x41 && char <= 0x5A, \\\" cannot storeInstructions(): invalid keycode\\\"); // A-Z only\\\"\\n    }\\n  }\\n}\",\"keccak256\":\"0xe5e0795fc6d5dec2d402e2e21d310a664be435f77c3f33e4d937e862bfa3ff9d\",\"license\":\"GPL-2.0\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 4378,
            "contract": "contracts/Systems/EXC.sol:Executive",
            "label": "_proxy",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(Proxy)4866"
          },
          {
            "astId": 4892,
            "contract": "contracts/Systems/EXC.sol:Executive",
            "label": "totalInstructions",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4898,
            "contract": "contracts/Systems/EXC.sol:Executive",
            "label": "storedInstructions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_array(t_struct(Instruction)4484_storage)dyn_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Instruction)4484_storage)dyn_storage": {
            "base": "t_struct(Instruction)4484_storage",
            "encoding": "dynamic_array",
            "label": "struct Instruction[]",
            "numberOfBytes": "32"
          },
          "t_contract(Proxy)4866": {
            "encoding": "inplace",
            "label": "contract Proxy",
            "numberOfBytes": "20"
          },
          "t_enum(Actions)4478": {
            "encoding": "inplace",
            "label": "enum Actions",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_array(t_struct(Instruction)4484_storage)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct Instruction[])",
            "numberOfBytes": "32",
            "value": "t_array(t_struct(Instruction)4484_storage)dyn_storage"
          },
          "t_struct(Instruction)4484_storage": {
            "encoding": "inplace",
            "label": "struct Instruction",
            "members": [
              {
                "astId": 4481,
                "contract": "contracts/Systems/EXC.sol:Executive",
                "label": "action",
                "offset": 0,
                "slot": "0",
                "type": "t_enum(Actions)4478"
              },
              {
                "astId": 4483,
                "contract": "contracts/Systems/EXC.sol:Executive",
                "label": "target",
                "offset": 1,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Policies/Governance.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.11;\\n\\nimport '../Proxy.sol';\\nimport '../Systems/EXC.sol';\\nimport '../Systems/REP.sol';\\nimport '../Systems/TKN.sol';\\nimport '../Systems/TSY.sol';\\nimport '../Systems/VTP.sol';\\n\\n\\ncontract Governance is Policy {\\n\\n  Executive private EXC;\\n  Token private TKN;\\n  Treasury private TSY;\\n  Reputation private REP;\\n  VotingPower private VTP;\\n\\n  constructor(Proxy proxy_) Policy(proxy_) {\\n    EXC = Executive(requireSystem(\\\"EXC\\\"));\\n    TKN = Token(requireSystem(\\\"TKN\\\"));\\n    TSY = Treasury(requireSystem(\\\"TSY\\\")); \\n    REP = Reputation(requireSystem(\\\"REP\\\"));\\n    VTP = VotingPower(requireSystem(\\\"VTP\\\")); \\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                               POLICY VARIABLES                                //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  struct Proposal {\\n    bytes32 name; // name of the proposal—human readable reference.\\n    uint256 instructionsId; // reference of the instruction set saved in the executive system.\\n    address proposer; // address of the wallet sending the proposal\\n    bytes2[] coauthors; // Ids of all the coauthors of the proposal (get equal split of the bounty reward) \\n  }\\n\\n  struct StagedProposal {\\n    uint256 instructionsId;\\n    uint256 epochStaged;\\n  }\\n\\n  StagedProposal public stagedProposal;\\n  mapping( uint256 => bool) public proposalHasStaged;\\n\\n  mapping( uint256 => Proposal ) public proposalForInstructionsId;\\n  \\n  mapping( uint256 => uint256 ) public endorsementsForProposal;\\n  mapping( address => mapping( uint256 => uint256 )) public userEndorsementsForProposal;\\n\\n  mapping( uint256 => int256 ) public netVotesForProposal;\\n  mapping( address => mapping( uint256 => int256 )) public userNetVotesForProposal;\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                USER INTERFACE                                 //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  // submit a new Proposal to the System\\n  function submitProposal(bytes32 proposalName_, Instruction[] calldata instructions_, bytes2[] calldata coauthors_) external {\\n    bytes2 proposerId = REP.getId(msg.sender);\\n\\n    require(REP.uniqueRepsOfId(proposerId) >= 5, \\\"cannot submitProposal(): caller needs at least 5 unique reps to submit proposal\\\");\\n    require(coauthors_.length > 0, \\\"cannot submitProposal(): there needs to be at least one author of the proposal\\\");\\n    for (uint256 i=0; i<coauthors_.length; i++) {\\n      require(REP.scoreOfId(coauthors_[i]) > 0, \\\"cannot submitProposal(): coauthors must have greater than 0 reputation\\\");\\n    }\\n\\n    uint256 instructionsId = EXC.storeInstructions(instructions_);\\n    proposalForInstructionsId[instructionsId] = Proposal(proposalName_, instructionsId, msg.sender, coauthors_);\\n  }\\n\\n\\n  // signal for a Proposal to be activated for a vote\\n  function endorseProposal(uint256 instructionsId_) external {\\n    uint256 userEndorsements = VTP.balanceOf(msg.sender);\\n    uint256 previousEndorsements = userEndorsementsForProposal[msg.sender][instructionsId_];\\n\\n    require( userEndorsements > previousEndorsements, \\\"cannot endorseProposal(): user doesn't have enough voting power to endorse proposal\\\");\\n             \\n    userEndorsementsForProposal[msg.sender][instructionsId_] = userEndorsements;\\n    endorsementsForProposal[instructionsId_] -= previousEndorsements;\\n    endorsementsForProposal[instructionsId_] += userEndorsements;\\n  }\\n\\n\\n  function stageProposal(uint256 instructionsId_) external {\\n    uint256 currentEpoch = _proxy.currentEpoch();\\n\\n    require(msg.sender == proposalForInstructionsId[instructionsId_].proposer, \\\"cannot stageProposal(): only the original proposer can stage it for a vote\\\");\\n    require(endorsementsForProposal[instructionsId_] > VTP.totalSupply() / 5, \\\"cannot stageProposal(): proposal needs at least 1/5 of max endorsements to be staged\\\");\\n    require(proposalHasStaged[instructionsId_] == false, \\\"cannot stageProposal(): proposal has already been staged before\\\");\\n    require(currentEpoch >= stagedProposal.epochStaged + 2, \\\"cannot stageProposal(): currently staged proposal has not expired\\\");\\n\\n    proposalHasStaged[instructionsId_] = true;\\n    stagedProposal = StagedProposal(instructionsId_, currentEpoch);\\n  }\\n\\n\\n  function vote(bool vote_) external {\\n    uint256 userVotes = VTP.balanceOf( msg.sender );\\n    int256 userNetVotes = vote_ ? int256(userVotes) : int256(-1) * int256(userVotes);\\n\\n    require (userNetVotesForProposal[msg.sender][stagedProposal.instructionsId] == 0, \\\"cannot voteOnStagedProposal(): user can only vote once\\\");\\n    \\n    userNetVotesForProposal[msg.sender][stagedProposal.instructionsId] = userNetVotes;\\n    netVotesForProposal[stagedProposal.instructionsId] += userNetVotes;\\n\\n    if ( netVotesForProposal[stagedProposal.instructionsId] > int256(VTP.totalSupply() * 4 / 10 )) {\\n      bytes2[] memory coauthors = proposalForInstructionsId[stagedProposal.instructionsId].coauthors;\\n      uint256 rewardAmt = (VTP.totalSupply() * 2 / 100) / coauthors.length;\\n\\n      for (uint i=0; i<coauthors.length; i++) {\\n        address wallet = REP.walletOfId(coauthors[i]);\\n        TKN.mint(wallet, rewardAmt);\\n        VTP.resetVestingCredits(wallet);\\n      }\\n\\n      VTP.rebase(500);\\n      EXC.executeInstructions(stagedProposal.instructionsId);\\n      stagedProposal = StagedProposal(uint256(0), uint256(0));\\n    } \\n    \\n    else if (netVotesForProposal[stagedProposal.instructionsId] < int256(VTP.totalSupply()) * -3 / 10 ) {\\n      VTP.rebase(500);\\n      stagedProposal = StagedProposal(uint256(0), uint256(0));\\n    }\\n  }\\n}\"\n    },\n    \"contracts/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\ncontract System {\\n    Proxy public _proxy;\\n\\n\\n    constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n    }\\n\\n\\n    function KEYCODE() external pure virtual returns (bytes3) {}\\n\\n\\n    modifier onlyPolicy {\\n        require (_proxy.approvedPolicies( msg.sender ), \\\"onlyPolicy(): only approved policies can call this function\\\");\\n        _;\\n    }\\n}\\n\\n\\ncontract Policy {\\n  Proxy public _proxy;\\n\\n\\n  constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n  }\\n\\n\\n  function requireSystem(bytes3 keycode_) internal view returns (address) {\\n    address systemForKeycode = _proxy.getSystemForKeycode(keycode_);\\n\\n    require(systemForKeycode != address(0), \\\"cannot _requireSytem(): system does not exist\\\" );\\n\\n    return systemForKeycode;\\n  }\\n\\n\\n  function configureSystems() virtual external onlyProxy {}\\n\\n\\n  modifier onlyProxy {\\n    require (msg.sender == address(_proxy), \\\"onlyProxy(): only the Proxy can call this function\\\");\\n    _;\\n  }\\n\\n}\\n\\n\\nenum Actions {\\n  InstallSystem,\\n  UpgradeSystem,\\n  ApprovePolicy,\\n  TerminatePolicy,\\n  ChangeExecutive\\n}\\n\\n\\nstruct Instruction {\\n  Actions action;\\n  address target;\\n}\\n\\n\\ncontract Proxy{\\n\\n  address public executive; \\n\\n  constructor() {\\n    executive = msg.sender;\\n  }\\n  \\n  modifier onlyExecutive() {\\n    require ( msg.sender == executive, \\\"onlyExecutive(): only the assigned executive can call the function\\\" );\\n    _;\\n  }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  //                                  EPOCH STUFF                                    //\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  \\n\\n  uint256 public startingEpochTimestamp; \\n  uint256 public constant epochLength = 60 * 60 * 24 * 7; // number of seconds in a week\\n  bool public isLaunched;\\n\\n\\n  function currentEpoch() public view returns (uint256) {\\n    if ( isLaunched == true && block.timestamp >= startingEpochTimestamp ) {\\n      return (( block.timestamp - startingEpochTimestamp ) / epochLength ) + 1;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function launch() external onlyExecutive {\\n    require (isLaunched == false, \\\"cannot launch(): Proxy is already launched\\\");\\n    startingEpochTimestamp = epochLength * (( block.timestamp / epochLength ) + 1 );\\n    isLaunched = true;\\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                                 DEPENDENCY MANAGEMENT                             //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(bytes3 => address) public getSystemForKeycode; // get contract for system keycode\\n  mapping(address => bytes3) public getKeycodeForSystem; // get system keycode for contract\\n  mapping(address => bool) public approvedPolicies; // whitelisted apps\\n  address[] public allPolicies;\\n\\n  event ActionExecuted(Actions action, address target);\\n  event AllPoliciesReconfigured(uint16 currentEpoch);\\n\\n  \\n  function executeAction(Actions action_, address target_) external onlyExecutive {\\n    if (action_ == Actions.InstallSystem) {\\n      _installSystem(target_); \\n\\n    } else if (action_ == Actions.UpgradeSystem) {\\n      _upgradeSystem(target_); \\n\\n    } else if (action_ == Actions.ApprovePolicy) {\\n      _approvePolicy(target_); \\n\\n    } else if (action_ == Actions.TerminatePolicy) {\\n      _terminatePolicy(target_); \\n    \\n    } else if (action_ == Actions.ChangeExecutive) {\\n      // require Proxy to install the executive system before calling ChangeExecutive on it\\n      require(getKeycodeForSystem[target_] == \\\"EXC\\\", \\\"cannot changeExecutive(): target is not the Executive system\\\");\\n      executive = target_;\\n    }\\n\\n    emit ActionExecuted(action_, target_);\\n  }\\n\\n\\n  function _installSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    \\n    // @NOTE check newSystem_ != 0\\n    require( getSystemForKeycode[keycode] == address(0), \\\"cannot _installSystem(): Existing system found for keycode\\\");\\n\\n    getSystemForKeycode[keycode] = newSystem_;\\n    getKeycodeForSystem[newSystem_] = keycode;\\n  }\\n\\n\\n  function _upgradeSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    address oldSystem = getSystemForKeycode[keycode];\\n    \\n    require(oldSystem != address(0) && oldSystem != newSystem_, \\\"cannot _upgradeSystem(): an existing system must be upgraded to a new system\\\");\\n\\n    getKeycodeForSystem[oldSystem] = bytes3(0);\\n    getKeycodeForSystem[newSystem_] = keycode;\\n    getSystemForKeycode[keycode] = newSystem_;\\n\\n    _reconfigurePolicies();\\n  }\\n\\n\\n  function _approvePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == false, \\\"cannot _approvePolicy(): Policy is already approved\\\" );\\n\\n    approvedPolicies[policy_] = true;\\n    \\n    allPolicies.push(policy_);\\n    Policy(policy_).configureSystems();\\n  }\\n\\n  function _terminatePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == true, \\\"cannot _terminatePolicy(): Policy is not approved\\\" );\\n    \\n    approvedPolicies[policy_] = false;\\n  }\\n\\n\\n  function _reconfigurePolicies() internal {\\n    for (uint i=0; i<allPolicies.length; i++) {\\n      address policy_ = allPolicies[i];\\n      if (approvedPolicies[policy_]) {\\n        Policy(policy_).configureSystems();\\n      }\\n    }\\n  }\\n}\\n\\n\\n\"\n    },\n    \"contracts/Systems/EXC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.11;\\n// EXE is the execution engine for the OS.\\n\\nimport \\\"../Proxy.sol\\\";\\n\\ncontract Executive is System {\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                           Proxy Proxy Configuration                         //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  constructor(Proxy proxy_) System(proxy_) {\\n    // instructionsForId[0];\\n  }\\n\\n  function KEYCODE() external pure override returns (bytes3) { return \\\"EXC\\\"; }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                              System Variables                               //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  /* imported from Proxy.sol\\n\\n  enum Actions {\\n    ChangeExecutive,\\n    ApprovePolicy,\\n    TerminatePolicy,\\n    InstallSystem,\\n    UpgradeSystem\\n  }\\n\\n  struct Instruction {\\n    Actions action;\\n    address target;\\n  }\\n\\n  */\\n\\n  uint256 public totalInstructions;\\n  mapping(uint256 => Instruction[]) public storedInstructions;\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                             Policy Interface                                //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  event ProxyLaunched(uint256 timestamp);\\n  event InstructionsStored(uint256 instructionsId);\\n  event InstructionsExecuted(uint256 instructionsId);\\n\\n\\n  function launchProxy() external onlyPolicy {\\n    _proxy.launch();\\n\\n    emit ProxyLaunched(block.timestamp);\\n  }\\n\\n\\n  function storeInstructions(Instruction[] calldata instructions_) external onlyPolicy returns(uint256) {\\n    uint256 instructionsId = totalInstructions + 1;\\n    Instruction[] storage instructions = storedInstructions[instructionsId];\\n\\n    require(instructions_.length > 0, \\\"cannot storeInstructions(): instructions cannot be empty\\\");\\n\\n    // @TODO use u256\\n    for(uint i=0; i<instructions_.length; i++) { \\n      _ensureContract(instructions_[i].target);\\n      if (instructions_[i].action == Actions.InstallSystem || instructions_[i].action == Actions.UpgradeSystem) {\\n        bytes3 keycode = System(instructions_[i].target).KEYCODE();\\n        _ensureValidKeycode(keycode);\\n        if (keycode == \\\"EXC\\\") {\\n          require(instructions_[instructions_.length-1].action == Actions.ChangeExecutive, \\n                  \\\"cannot storeInstructions(): changes to the Executive system (EXC) requires changing the Proxy executive as the last step of the proposal\\\");\\n          require(instructions_[instructions_.length-1].target == instructions_[i].target,\\n                  \\\"cannot storeInstructions(): changeExecutive target address does not match the upgraded Executive system address\\\");\\n        }\\n      }\\n      instructions.push(instructions_[i]);\\n    }\\n    totalInstructions++;\\n\\n    emit InstructionsStored(instructionsId);\\n\\n    return instructionsId;\\n  }\\n\\n  function executeInstructions(uint256 instructionsId_) external onlyPolicy {\\n    Instruction[] storage proposal = storedInstructions[instructionsId_];\\n\\n    require(proposal.length > 0, \\\"cannot executeInstructions(): proposal does not exist\\\");\\n\\n    for(uint step=0; step<proposal.length; step++) {\\n      _proxy.executeAction(proposal[step].action, proposal[step].target);\\n    }\\n\\n    emit InstructionsExecuted(instructionsId_);\\n  }\\n  \\n\\n  /////////////////////////////// INTERNAL FUNCTIONS ////////////////////////////////\\n\\n\\n  function _ensureContract(address target_) internal view {\\n    uint256 size;\\n    assembly { size := extcodesize(target_) }\\n    require(size > 0, \\\"cannot storeInstructions(): target address is not a contract\\\");\\n  }\\n\\n\\n  function _ensureValidKeycode(bytes3 keycode) internal pure {\\n    for (uint256 i = 0; i < 3; i++) {\\n        bytes1 char = keycode[i];\\n        require(char >= 0x41 && char <= 0x5A, \\\" cannot storeInstructions(): invalid keycode\\\"); // A-Z only\\\"\\n    }\\n  }\\n}\"\n    },\n    \"contracts/Systems/REP.sol\": {\n      \"content\": \"// Proxy Registry System\\n\\n\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../Proxy.sol\\\";\\n\\ncontract Reputation is System {\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                           Proxy Proxy Configuration                         //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  constructor(Proxy proxy_) System(proxy_) {}\\n\\n\\n  function KEYCODE() external pure override returns (bytes3) { \\n    return \\\"REP\\\"; \\n  }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                              System Variables                               //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(address => bytes2) public getId;\\n  mapping(bytes2 => address) public walletOfId;\\n  \\n  mapping(bytes2 => uint256) public budgetOfId;\\n  mapping(bytes2 => uint256) public scoreOfId;\\n  mapping(bytes2 => uint256) public uniqueRepsOfId;\\n\\n  mapping(bytes2 => mapping(bytes2 => uint256)) public totalGivenTo;\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                             Functions                                       //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  event WalletRegistered(address wallet, bytes2 memberId);\\n  event BudgetIncreased(bytes2 memberId, uint256 amount);\\n  event ReputationGiven(bytes2 fromMemberId, bytes2 toMemberId, uint256 amount);\\n  event ReputationTransferred(bytes2 fromMemberId, bytes2 toMemberId, uint256 amount);\\n  event UniqueRepsIncremented(bytes2 fromMemberId);\\n\\n\\n  // @@@ Check that the bytes2 hash cannot be bytes2(0)\\n  function registerWallet(address wallet_) external onlyPolicy returns (bytes2) {\\n    // validate: wallets cannot be registered twice. (just manually test this first)\\n    require( getId[wallet_] == bytes2(0), \\\"cannot registerWallet(): wallet already registered\\\" );\\n\\n    // 1. Take the first two bytes (4 hex characters) of a hash of the wallet\\n    bytes32 walletHash = keccak256(abi.encode(wallet_));\\n    bytes2 memberId = bytes2(walletHash);\\n\\n    // 2. If the memberId already exists (or is 0x0000), continue hashing until a unused memberId is found\\n    while (walletOfId[memberId] != address(0) || memberId == bytes2(0)) {\\n      walletHash = keccak256(abi.encode(walletHash));\\n      memberId = bytes2(walletHash);\\n    }\\n\\n    // 3. Save the id in the system\\n    getId[wallet_] = memberId;\\n    walletOfId[memberId] = wallet_;\\n\\n    // 4. emit event\\n    emit WalletRegistered(wallet_, memberId);\\n\\n    // 5. Return the user IIdd\\n    return memberId;\\n  }\\n\\n\\n  //\\n  function increaseBudget(bytes2 memberId_, uint256 amount_) external onlyPolicy {\\n    //\\n    budgetOfId[memberId_] += amount_;\\n\\n    emit BudgetIncreased(memberId_, amount_);\\n  }\\n  \\n\\n  function transferReputation(bytes2 from_, bytes2 to_, uint256 amount_) external onlyPolicy {    \\n    budgetOfId[ from_ ] -= amount_;\\n    scoreOfId[ to_ ] += amount_;\\n\\n    emit ReputationTransferred(from_, to_, amount_);\\n  }\\n\\n\\n  function incrementUniqueReps(bytes2 memberId_) external onlyPolicy {    \\n    uniqueRepsOfId[ memberId_ ]++;\\n\\n    emit UniqueRepsIncremented( memberId_ );\\n  }\\n}\\n\"\n    },\n    \"contracts/Systems/TKN.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../Proxy.sol';\\n\\ncontract Token is System, IERC20 {\\n  \\n  //////////////////////////////////////////////////////////////////////////////\\n  //                              SYSTEM CONFIG                               //\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // @NOTE consider making these constant, reduce read cost\\n  string public name = \\\"PROXY Token\\\";\\n  string public symbol = \\\"PROX\\\";\\n  uint8 public decimals = 3;\\n\\n  uint256 public totalSupply = 0;\\n  // slot = sha3(1, address) -> balance\\n  mapping(address => uint256) public balanceOf;\\n  // slot 2 - length of thisArr\\n  // sha3(2) -> elements of thisArr\\n  bytes32[] public thisArr;\\n  uint public thisNum;\\n\\n  constructor(Proxy proxy_) System(proxy_) {\\n  }\\n\\n  function KEYCODE() external pure override returns (bytes3) { \\n    return \\\"TKN\\\"; \\n  }\\n\\n\\n  // brick the allowance features for the token (because transfers and transferFrom are restricted to a governance mechanism=)\\n  function allowance(address, address) external pure override returns (uint256) {\\n    return type(uint256).max;\\n  }\\n\\n  function approve(address, uint256) external pure override returns (bool) {\\n    return true;\\n  }\\n\\n\\n\\n  ////////////////////////////////////////////////////////////////////////////\\n  //                           POLICY INTERFACE                             //\\n  ////////////////////////////////////////////////////////////////////////////\\n\\n  \\n  // event Transfer(address from, address to, uint256 amount); => already declared in the imported IERC20.sol\\n\\n\\n  // mint tokensToMint_, but only if the msg.sender has enough reserve tokens to exchange\\n  function mint(address to_, uint256 amount_) external onlyPolicy returns (bool) {\\n\\n    totalSupply += amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(address(0), to_, amount_);\\n\\n    return true;\\n  }\\n\\n  function burn(address from_, uint256 amount_) external onlyPolicy returns (bool) {\\n    \\n    balanceOf[from_] -= amount_;\\n\\n    // Cannot underflow because a user's balance\\n    // will never be larger than the total supply.\\n    unchecked {\\n        totalSupply -= amount_;\\n    }\\n\\n    emit Transfer(from_, address(0), amount_);\\n\\n    return true;\\n  }\\n\\n\\n  // restrict 3rd party interactions with the token to approved policies.\\n  function transferFrom(address from_, address to_, uint256 amount_) public override onlyPolicy returns (bool) {\\n    balanceOf[from_] -= amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(from_, to_, amount_);\\n\\n    return true;\\n  }\\n\\n\\n  // restrict EOA transfers to approved policies.\\n  function transfer(address to_, uint256 amount_) public override onlyPolicy returns (bool) {\\n    balanceOf[msg.sender] -= amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(msg.sender, to_, amount_);\\n\\n    return true;\\n  }\\n\\n\\n}\"\n    },\n    \"contracts/Systems/TSY.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport '../Proxy.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract Treasury is System {\\n\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  //                              SYSTEM CONFIG                               //\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n\\n  constructor(Proxy proxy_) System(proxy_) {}\\n  \\n  function KEYCODE() external pure override returns (bytes3) { return \\\"TSY\\\"; }\\n\\n  mapping(address => bool) public trackedAsset;\\n\\n  mapping(address => uint256) public totalInflowsForAsset;\\n  mapping(address => uint256) public totalOutflowsForAsset;\\n\\n  mapping(uint256 => mapping(address => uint256)) public assetInflowsPerEpoch;\\n  mapping(uint256 => mapping(address => uint256)) public assetOutflowsPerEpoch;\\n\\n\\n  ////////////////////////////////////////////////////////////////////////////\\n  //                           POLICY INTERFACE                             //\\n  ////////////////////////////////////////////////////////////////////////////\\n  \\n  \\n  event AssetAdded(address token);\\n  event PaymentProcessed(address from, address token, uint256 amount);\\n  event FundsWithdrawn(address token, uint256 amount);\\n\\n\\n  function addTrackedAsset(address token_) external onlyPolicy {\\n    trackedAsset[token_] = true;\\n\\n    emit AssetAdded(token_);\\n  }\\n\\n\\n  function processPayment(address from_, address token_, uint256 amount_) external onlyPolicy {\\n    require(trackedAsset[token_] == true, \\\"cannot processPayment(): token is not an accepted currency by the treasury\\\");\\n    \\n    IERC20(token_).transferFrom(from_, address(this), amount_);\\n\\n    uint256 epoch = _proxy.currentEpoch();\\n    totalInflowsForAsset[token_] += amount_;\\n    assetInflowsPerEpoch[epoch][token_] += amount_;\\n\\n    emit PaymentProcessed(from_, token_, amount_);\\n  }\\n\\n\\n  function withdrawFunds(address token_, uint256 amount_) external onlyPolicy {\\n    require(trackedAsset[token_] == true, \\\"cannot withdrawFunds(): token is not an accepted currency by the treasury\\\");\\n\\n    IERC20(token_).transfer(msg.sender, amount_);\\n\\n    uint256 epoch = _proxy.currentEpoch();\\n    totalOutflowsForAsset[token_] += amount_;\\n    assetOutflowsPerEpoch[epoch][token_] += amount_;\\n\\n    emit FundsWithdrawn(token_, amount_);\\n  }\\n}\"\n    },\n    \"contracts/Systems/VTP.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../Proxy.sol';\\n\\ncontract VotingPower is System, IERC20 {\\n  \\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  //                              SYSTEM CONFIG                               //\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n\\n  constructor(Proxy proxy_) System(proxy_) {}\\n\\n  function KEYCODE() external pure override returns (bytes3) { return \\\"VTP\\\"; }\\n\\n  function balanceOf(address wallet_) public view override returns (uint256) {\\n    return _baseBalanceOf[wallet_] * currentIndex / 1e6;\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalBaseSupply * currentIndex / 1e6;\\n  }\\n\\n  // brick the allowance features for the token\\n  function allowance(address, address) external pure override returns (uint256) {\\n    return type(uint256).max;\\n  }\\n\\n  function approve(address, uint256) external pure override returns (bool) {\\n    return true;\\n  }\\n\\n  // disable transfer of tokens from wallets. Voting power is directly issued to address and stays there until redemption.\\n  function transferFrom(address, address, uint256) external pure override returns(bool) {\\n    assert(false);\\n    return true;\\n  }\\n\\n  // restrict EOA transfers.\\n  function transfer(address, uint256) public pure override returns (bool) {\\n    assert(false);\\n    return true;\\n  }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////\\n  //                              System Variables                               //\\n  /////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  string public name = \\\"PROXY Voting Power\\\";\\n  string public symbol = \\\"gPROX\\\";\\n  uint8 public decimals = 3;\\n\\n  uint256 public currentIndex = 1e6; // rebase multiplier on base, with 6 decimals of precision\\n  uint256 private _totalBaseSupply = 0;\\n  mapping(address => uint256) private _baseBalanceOf;\\n  \\n  uint16 public vestingTerm = 15;\\n  mapping(address => uint16) public vestingCreditsOf;\\n\\n\\n  ////////////////////////////////////////////////////////////////////////////\\n  //                           POLICY INTERFACE                             //\\n  ////////////////////////////////////////////////////////////////////////////\\n\\n\\n  // event Transfer(address from, address to, uint256 amount) => declared in the imported IERC20.sol\\n  event Rebased(uint256 basisPoints);\\n  event VestingCreditsIncremented(address wallet);\\n  event VestingCreditsReset(address wallet);\\n\\n\\n  function rebase(uint256 basisPoints_) external onlyPolicy {\\n    currentIndex = currentIndex * (10000 + basisPoints_) / 1e4;\\n\\n    emit Rebased(basisPoints_);\\n  }\\n\\n\\n  function issue(address to_, uint256 amount_) external onlyPolicy returns (uint256) {\\n    uint256 baseAmt = amount_ * (1e6) / currentIndex;\\n\\n    vestingCreditsOf[msg.sender] = 0;\\n    _totalBaseSupply += baseAmt;\\n    _baseBalanceOf[to_] += baseAmt;\\n\\n    emit Transfer(address(0), to_, amount_);\\n\\n    return baseAmt;\\n  }\\n\\n\\n  function redeem(address from_, uint256 amount_) external onlyPolicy returns(uint256) {\\n    uint256 baseAmt = amount_ * 1e6 / currentIndex;\\n\\n    vestingCreditsOf[msg.sender] = 0;\\n    _baseBalanceOf[from_] -= baseAmt;\\n    _totalBaseSupply -= baseAmt;\\n\\n    emit Transfer(from_, address(0), amount_);\\n\\n    return baseAmt;\\n  }\\n\\n\\n  function resetVestingCredits(address wallet_) external onlyPolicy {\\n    vestingCreditsOf[wallet_] = 0;\\n\\n    emit VestingCreditsReset(wallet_);\\n  }\\n\\n\\n  function incrementVestingCredits(address wallet_) external onlyPolicy {\\n    vestingCreditsOf[wallet_]++;\\n\\n    emit VestingCreditsIncremented(wallet_);\\n  }\\n}\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"contracts/Policies/TokenSale.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\n// Presale Policy\\n\\n// SPDX License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Proxy.sol';\\nimport '../Systems/REP.sol';\\nimport '../Systems/TKN.sol';\\nimport '../Systems/TSY.sol';\\nimport '../Systems/VTP.sol';\\n\\n\\ncontract TokenSale is Policy { \\n\\n  constructor(Proxy Proxy_) Policy(Proxy_) {}\\n\\n\\n  Token private TKN;\\n  Treasury private TSY;\\n  Reputation private REP;\\n\\n\\n  function configureSystems() external override {\\n      require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n\\n      TKN = Token(requireSystem(\\\"TKN\\\"));\\n      REP = Reputation(requireSystem(\\\"REP\\\")); \\n      TSY = Treasury(requireSystem(\\\"TSY\\\"));\\n    }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                  POLICY STATE                                 //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(uint256 => mapping(address => uint256)) purchaseHistory;\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                    ACTIONS                                    //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n  // ********************************************************************************\\n  //\\n  //                               Purchase Presale Token\\n  //                              ------------------------  \\n  //\\n  //    Purchase PROX tokens for 5 FRAX or DAI\\n  // \\n  //    NOTE: Make sure you approve the necessary DAI first to purchase!\\n  //      See details: www.notion.so/ProxyProtocol/Trial-By-Proxy/Instructions/Presale.md\\n  //\\n  //    NOTE: PROXY has 3 decimals, so add three zeros to your purchase amount \\n  //      e.g. If you want to buy 5 aPROXY, set amount_ = 5;\\n  //\\n  // ********************************************************************************\\n\\n\\n  function purchase(uint16 amount_, address pmtCurrency_) external {       \\n\\n    uint256 currentEpoch = _proxy.currentEpoch();\\n    uint256 alreadyPurchased = purchaseHistory[currentEpoch][msg.sender];\\n    uint256 paymentValue = 5 * amount_ * (10**IERC20Metadata(pmtCurrency_).decimals());\\n\\n    require(alreadyPurchased + amount_ <= _getAllocationOf(msg.sender), \\\"cannot purchaseToken(): not enough token sale allocation\\\");     \\n\\n    purchaseHistory[_proxy.currentEpoch()][msg.sender] = alreadyPurchased + amount_;\\n\\n    TSY.processPayment(msg.sender, pmtCurrency_, paymentValue);\\n    TKN.mint(msg.sender, amount_);\\n  }\\n\\n\\n  function viewMyAllocation() external view returns(uint256) {       \\n    return _getAllocationOf(msg.sender);\\n  }\\n\\n\\n  // Internal Functions\\n\\n  function _getAllocationOf(address wallet_) internal view returns (uint256) {\\n    \\n    bytes2 proxyId = REP.getId(wallet_);\\n    uint256 reputationAlloc = uint256(REP.scoreOfId(proxyId) / 10);\\n    uint256 uniqueRepsAlloc = uint256(REP.uniqueRepsOfId(proxyId) * 30);\\n\\n    require(proxyId != bytes2(0), \\\"cannot find getAllocationOf(): caller is not a registered wallet\\\");\\n\\n    if (reputationAlloc <= uniqueRepsAlloc && reputationAlloc < 2000) {\\n      return reputationAlloc;\\n    } else if (uniqueRepsAlloc < reputationAlloc && uniqueRepsAlloc < 2000) {\\n      return uniqueRepsAlloc;\\n    } else {\\n      return 2000;\\n    }\\n  }\\n}\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/Policies/Testing/_MOCK_POLICIES.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../../Proxy.sol\\\";\\nimport \\\"../../Systems/EXC.sol\\\";\\nimport \\\"../../Systems/REP.sol\\\";\\nimport \\\"../../Systems/TKN.sol\\\";\\nimport \\\"../../Systems/TSY.sol\\\";\\nimport \\\"../../Systems/VTP.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\n\\ncontract InvalidSystem is System {\\n\\n  constructor( Proxy proxy_) System(proxy_) {}\\n\\n  function KEYCODE() external override pure returns (bytes3) { return \\\"000\\\"; }\\n}\\n\\ncontract InvalidSystem2 is System {\\n\\n  constructor( Proxy proxy_) System(proxy_) {}\\n\\n  function KEYCODE() external override pure returns (bytes3) { return \\\"abc\\\"; }\\n}\\n\\n\\ncontract InvalidSystem3 is System {\\n\\n  constructor( Proxy proxy_) System(proxy_) {}\\n\\n  function KEYCODE() external override pure returns (bytes3) { return \\\"AB\\\"; }\\n}\\n\\n\\ncontract TokenUpgraded is System, ERC20(\\\"Token Upgraded\\\", \\\"PROXv2\\\") {\\n  constructor( Proxy proxy_) System(proxy_) {}\\n\\n  function KEYCODE() external override pure returns (bytes3) { return \\\"TKN\\\"; }\\n\\n  function mint(address to_, uint256 amt_) external returns(bool) {\\n    _mint(to_, amt_);\\n    return true;\\n  }\\n\\n  function burn(address from_, uint256 amt_) external returns(bool) {\\n    _burn(from_, amt_);\\n\\n    return true;\\n  }\\n}\\n\\n\\ncontract ExecutivePolicy is Policy {\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {}\\n  Executive private EXC;\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    EXC = Executive(requireSystem(\\\"EXC\\\"));\\n  }\\n\\n  function launchProxy() public {\\n    EXC.launchProxy();\\n  }\\n\\n\\n  function storeInstructions(Instruction[] calldata instructions) external {\\n   EXC.storeInstructions(instructions);\\n  }\\n\\n  function executeInstructions(uint32 proposalId_) external {\\n    EXC.executeInstructions(proposalId_);\\n  }\\n}\\n\\n\\ncontract ReputationPolicy is Policy {\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {}\\n  Reputation private REP;\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    REP = Reputation(requireSystem(\\\"REP\\\"));\\n  }\\n\\n  function registerWallet(address wallet_) external {\\n    REP.registerWallet(wallet_);    \\n  }\\n\\n  function increaseBudget(bytes2 memberId_, uint256 amount_) external {\\n    REP.increaseBudget(memberId_, amount_);\\n  }\\n  \\n\\n  function transferReputation(bytes2 from_, bytes2 to_, uint256 amount_) external {    \\n    REP.transferReputation(from_, to_, amount_);\\n  }\\n\\n\\n  function incrementUniqueReps(bytes2 memberId_) external {    \\n    REP.incrementUniqueReps(memberId_);\\n  }\\n}\\n\\n\\ncontract TokenPolicy is Policy {\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {}\\n  Token private TKN;\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    TKN = Token(requireSystem(\\\"TKN\\\"));\\n  }\\n\\n  function mint(address to_, uint256 amount_) external {\\n    TKN.mint(to_, amount_);\\n  }\\n\\n  function burn(address from_, uint256 amount_) external {\\n    TKN.burn(from_, amount_);\\n  }\\n\\n  function transferFrom(address from_, address to_, uint256 amount_) external {\\n    TKN.transferFrom(from_, to_, amount_);\\n  }\\n\\n  function transfer(address to_, uint256 amount_) external {\\n    TKN.transfer(to_, amount_);\\n  }\\n}\\n\\n\\ncontract TreasuryPolicy is Policy {\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {}\\n  Treasury private TSY;\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    TSY = Treasury(requireSystem(\\\"TSY\\\"));\\n  }\\n\\n  function addTrackedAsset(address token_) external {\\n   TSY.addTrackedAsset(token_);\\n  }\\n\\n  function processPayment(address from_, address token_, uint256 amount_) external {\\n   TSY.processPayment(from_, token_, amount_);\\n  }\\n\\n\\n  function withdrawFunds(address token_, uint256 amount_) external {\\n    TSY.withdrawFunds(token_, amount_);\\n  }\\n}\\n\\ncontract VotingPowerPolicy is Policy {\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {}\\n  VotingPower private VTP;\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    VTP = VotingPower(requireSystem(\\\"VTP\\\"));\\n  }\\n\\n  function rebase(uint256 basisPoints_) external {\\n    VTP.rebase(basisPoints_);\\n  }\\n\\n\\n  function issue(address to_, uint256 amount_) external {\\n    VTP.issue(to_, amount_);\\n  }\\n\\n\\n  function redeem(address from_, uint256 amount_) external {\\n   VTP.redeem(from_, amount_);\\n  }\\n\\n\\n  function resetVestingCredits(address wallet_) external {\\n    VTP.resetVestingCredits(wallet_);\\n  }\\n\\n\\n  function incrementVestingCredits(address wallet_) external {\\n    VTP.incrementVestingCredits(wallet_);\\n  }\\n}\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/Policies/ProxyDAO.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../Systems/TKN.sol\\\";\\nimport \\\"../Systems/REP.sol\\\";\\nimport \\\"../Systems/VTP.sol\\\";\\nimport \\\"../Systems/TSY.sol\\\";\\n\\ncontract ProxyDAO is Policy {\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                              PR0XY Proxy CONFIG                               //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n  constructor( Proxy Proxy_ ) Policy( Proxy_ ) {}\\n\\n\\n  Token private TKN;\\n  VotingPower private VTP;\\n  Reputation private REP;\\n  Treasury private TSY;\\n\\n\\n  function configureSystems() external override {\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n\\n    TKN = Token(requireSystem(\\\"TKN\\\"));\\n    VTP = VotingPower(requireSystem(\\\"VTP\\\"));\\n    REP = Reputation(requireSystem(\\\"REP\\\")); \\n    TSY = Treasury(requireSystem(\\\"TSY\\\"));\\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                               POLICY VARIABLES                                //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(bytes2 => mapping(bytes2 => uint256)) public repsGiven;\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                 USER ACTIONS                                  //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  // Register for a Proxy ID\\n  function register(address pmtCurrency_) external {   \\n    require(_proxy.currentEpoch() != 0, \\\"cannot register(): Proxy has not launched yet!\\\");\\n\\n    // assign Id to wallet in the registry\\n    REP.registerWallet(msg.sender);\\n\\n    // get the decimals of the token \\n    uint8 decimals = IERC20Metadata(pmtCurrency_).decimals();\\n    \\n    // book the payment to the treasury\\n    TSY.processPayment(msg.sender, pmtCurrency_, 100 * (10 ** decimals));\\n  }\\n\\n  // Give reputation to a Proxy Id\\n  function giveReputation(bytes2 toMemberId_, uint256 amount_) external {\\n\\n    bytes2 fromMemberId = REP.getId(msg.sender);\\n    uint256 prevRepsGiven = repsGiven[fromMemberId][toMemberId_];\\n    uint256 newRepsGiven = prevRepsGiven + amount_;\\n\\n    require(fromMemberId != bytes2(0), \\\"cannot giveReputation(): caller does not have registered wallet\\\" );\\n    require(REP.walletOfId(toMemberId_) != address(0), \\\"cannot giveReputation(): receiving ID must be associated with a registered wallet\\\" );\\n    require(toMemberId_ != fromMemberId, \\\"cannot giveReputation(): caller cannot give themselves reputation\\\" );\\n    require(newRepsGiven <= 200, \\\"cannot giveReputation(): cannot exceed 200 reputation given per member\\\" );\\n\\n    REP.transferReputation(fromMemberId, toMemberId_, amount_);\\n    repsGiven[fromMemberId][toMemberId_] = newRepsGiven;\\n\\n    // increment the member's unique reputations if this is your the first time giving them reputation\\n    if (prevRepsGiven < 100 && newRepsGiven >= 100 ) {\\n      REP.incrementUniqueReps(toMemberId_);\\n    }\\n\\n    // give the member a 100 rep bonus (50%) if the giver is capping their reputation\\n    if (prevRepsGiven < 200 && newRepsGiven == 200 ) {\\n      REP.increaseBudget(bytes2(0), 100);\\n      REP.transferReputation(bytes2(0), toMemberId_, 100);\\n    }\\n\\n  }\\n\\n\\n  // Lock PROX for 15 vesting terms, get gPROX (Votes) and Reputation Budget in return.\\n  function lockTokens(uint256 amount_) external {\\n    bytes2 fromMemberId = REP.getId( msg.sender );\\n\\n    require(fromMemberId != bytes2(0), \\\"cannot lockTokens(): caller does not have a registered proxy Id\\\");\\n\\n    TKN.burn(msg.sender, amount_);\\n    VTP.resetVestingCredits(msg.sender);\\n    VTP.issue(msg.sender, amount_);\\n    REP.increaseBudget(fromMemberId, amount_);\\n  }\\n\\n\\n  // At 15 vesting terms or more, exchange gPROX (Votes) for PROX tokens.\\n  function redeemVotes( uint256 amount_) external {\\n    require(VTP.vestingCreditsOf(msg.sender) >= 15, \\\"cannot redeemVotes(): caller doesn't have enough vesting credits\\\");\\n    VTP.resetVestingCredits(msg.sender);\\n\\n    uint256 baseAmt = VTP.redeem(msg.sender, amount_);\\n    uint256 index = VTP.currentIndex() / 1e6;\\n    TKN.mint(msg.sender, baseAmt * index);\\n  }\\n}\\n\"\n    },\n    \"contracts/Policies/Prelaunch.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\n// import \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../Systems/TKN.sol\\\";\\nimport \\\"../Systems/EXC.sol\\\";\\nimport \\\"../Systems/REP.sol\\\";\\n\\ncontract Prelaunch is Policy {\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                 PROTOCOL CONFIG                               //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  address private _dev;\\n\\n  constructor( Proxy proxy_ ) Policy( proxy_ ) {\\n    _dev = msg.sender;\\n  }\\n  \\n\\n  Reputation private REP;\\n  Executive private EXC;\\n  Token private TKN;\\n\\n\\n  function configureSystems() external override{\\n    require(msg.sender == address(_proxy), \\\"cannot configureSystems(): only the Proxy contract can configure systems\\\");\\n    REP = Reputation(requireSystem(\\\"REP\\\"));\\n    EXC = Executive(requireSystem(\\\"EXC\\\"));\\n    TKN = Token(requireSystem(\\\"TKN\\\"));\\n  }\\n\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                               POLICY VARIABLES                                //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n\\n  address[] public claimAddresses;\\n  mapping(bytes2 => bool) public isClaimed;\\n\\n  mapping(address => bool) public isApproved;\\n\\n\\n  // functions with this modifier can only be called before the project is launched\\n  // Learn More: www.notion.so/pr0xy-prelaunch-phase\\n  modifier prelaunchOnly() {\\n\\n    // ensure that this function can only be called before the first epoch\\n    require ( _proxy.currentEpoch() == 0, \\\"prelaunchOnly() failed: Proxy has already been launched\\\" );\\n    _;\\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////\\n  //                                 USER INTERFACE                                //\\n  ///////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  event LaunchBonusClaimed(bytes2 memberId, uint256 slot);\\n\\n\\n\\n  // whitelists an address to register before the project launches\\n  function approvePreregistrationFor( address newMember_ ) external prelaunchOnly {\\n    require ( msg.sender == _dev, \\\"prelaunchOnly() failed: caller is not the dev\\\" );\\n\\n    // toggle whitelist\\n    isApproved[ newMember_ ] = true;\\n  }\\n\\n\\n  // Register for a Proxy ID\\n  function preregister() external prelaunchOnly {\\n    // only preapproved addresses can register before project launches.\\n    // For more details, visit: www.notion.so/pr0xy-tapped\\n    require ( isApproved[ msg.sender ], \\\"cannot register() during prelaunch: member is not preapproved\\\" );\\n    \\n    // assign Id to wallet in the registry\\n    bytes2 memberId = REP.registerWallet( msg.sender );\\n\\n    // seed the address with 100 reputation budget\\n    REP.increaseBudget( memberId, 100 );\\n  }\\n\\n  //\\n  function claimLaunchBonus() external prelaunchOnly {\\n    bytes2 memberId = REP.getId(msg.sender);\\n\\n    require(memberId != bytes2(0), \\\"cannot claimLaunchBonus(): caller does not have a Proxy ID\\\");\\n    require(isClaimed[memberId] == false, \\\"cannot claimLaunchSlot(): member has already claimed a slot\\\");\\n    require(REP.scoreOfId(memberId) >= 150, \\\"cannot claimLaunchSlot(): member does not have the required reputation score\\\");\\n    require(REP.uniqueRepsOfId(memberId) >= 5, \\\"cannot claimLaunchSlot(): member does not have the required uniqueReps\\\");\\n    require(_proxy.isLaunched() == false, \\\"cannot claimLaunchSlot(): project has already been launched\\\");\\n\\n    claimAddresses.push(msg.sender);\\n    isClaimed[memberId] = true;\\n\\n    if ( claimAddresses.length >= 35 ) {\\n      for ( uint i = 0; i < 35; i++ ) {\\n        TKN.mint( claimAddresses[i], 200e3 ); // mint each claim slot 50 PROX\\n      }\\n\\n      EXC.launchProxy();\\n    }\\n\\n    emit LaunchBonusClaimed(memberId, claimAddresses.length);\\n  }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 9999\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "389fa6c06fc73f4f06f330cf536065fb",
      "transactionHash": "0x256a07a69c9a082b79a00d09191f48bb51274b84479d3b1e76d8ad714589fc96",
      "args": [
        "0x85c0de725944d43ef9b56212049502dc699ce56a"
      ]
    },
    "decoded": {
      "from": "0x88532f5e88F6A1ccd9E64681aCc63416594000f4",
      "gasPrice": "25582518210",
      "gasLimit": "1124511",
      "to": null,
      "value": "0",
      "nonce": 10,
      "data": "0x608060405234801561001057600080fd5b506040516113b33803806113b383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611320806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636eaadfc71161005b5780636eaadfc7146100eb57806385e0d8ad146100f45780638ba639a4146100fc578063cc2effdc1461011d57600080fd5b806318dc0de7146100825780631ae7ec2e146100a85780632ce21901146100d6575b600080fd5b610095610090366004610f45565b610162565b6040519081526020015b60405180910390f35b6040517f4558430000000000000000000000000000000000000000000000000000000000815260200161009f565b6100e96100e4366004610fba565b610833565b005b61009560015481565b6100e9610b33565b61010f61010a366004610fd3565b610d0b565b60405161009f929190611024565b60005461013d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190611084565b610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b6000600154600161029791906110dc565b600081815260026020526040902090915083610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a20696e737460448201527f72756374696f6e732063616e6e6f7420626520656d7074790000000000000000606482015260840161027d565b60005b848110156107e257610372868683818110610355576103556110f4565b905060400201602001602081019061036d9190611148565b610d59565b6000868683818110610386576103866110f4565b61039c9260206040909202019081019150611172565b60048111156103ad576103ad610ff5565b14806103f1575060018686838181106103c8576103c86110f4565b6103de9260206040909202019081019150611172565b60048111156103ef576103ef610ff5565b145b1561078e57600086868381811061040a5761040a6110f4565b90506040020160200160208101906104229190611148565b73ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061118f565b905061049b81610dec565b7f45584300000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000008216141561078c57600487876104f46001826111d1565b818110610503576105036110f4565b6105199260206040909202019081019150611172565b600481111561052a5761052a610ff5565b14610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152608860248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f67657320746f20746865204578656375746976652073797374656d202845584360648201527f29207265717569726573206368616e67696e67207468652050726f787920657860848201527f6563757469766520617320746865206c6173742073746570206f66207468652060a48201527f70726f706f73616c00000000000000000000000000000000000000000000000060c482015260e40161027d565b86868381811061063b5761063b6110f4565b90506040020160200160208101906106539190611148565b73ffffffffffffffffffffffffffffffffffffffff1687876106766001826111d1565b818110610685576106856110f4565b905060400201602001602081019061069d9190611148565b73ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606f60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a206368616e60448201527f676545786563757469766520746172676574206164647265737320646f65732060648201527f6e6f74206d61746368207468652075706772616465642045786563757469766560848201527f2073797374656d2061646472657373000000000000000000000000000000000060a482015260c40161027d565b505b818686838181106107a1576107a16110f4565b835460018101855560009485526020909420604090910292909201929190910190506107cd82826111e8565b505080806107da906112b1565b915050610338565b50600180549060006107f3836112b1565b90915550506040518281527f786456549a8048fc360b44d675c164244436ef1e5048c3aecea4d160400fd0019060200160405180910390a1509392505050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611084565b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b600081815260026020526040902080546109ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f63616e6e6f742065786563757465496e737472756374696f6e7328293a20707260448201527f6f706f73616c20646f6573206e6f742065786973740000000000000000000000606482015260840161027d565b60005b8154811015610afb57600054825473ffffffffffffffffffffffffffffffffffffffff9091169063c4d1f8f190849084908110610a2f57610a2f6110f4565b600091825260209091200154845460ff90911690859085908110610a5557610a556110f4565b60009182526020909120015460405160e084901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ab69291610100900473ffffffffffffffffffffffffffffffffffffffff1690600401611024565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050508080610af3906112b1565b9150506109f0565b506040518281527fdfded950fef0d7666005e810dd1bfab64a4d9e8bc53d3abe31c2cf7268d3d8239060200160405180910390a15050565b6000546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611084565b610c51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e0000000000606482015260840161027d565b60008054604080517f01339c21000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926301339c219260048084019382900301818387803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050507ffa7fcc389a8dd8946810c44eaba79476ebda5ffa11280a99bd7fbef680336ec742604051610d0191815260200190565b60405180910390a1565b60026020528160005260406000208181548110610d2757600080fd5b60009182526020909120015460ff81169250610100900473ffffffffffffffffffffffffffffffffffffffff16905082565b803b80610de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f63616e6e6f742073746f7265496e737472756374696f6e7328293a207461726760448201527f65742061646472657373206973206e6f74206120636f6e747261637400000000606482015260840161027d565b5050565b60005b6003811015610de8576000828260038110610e0c57610e0c6110f4565b1a60f81b90507f41000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610801590610ea657507f5a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b610f32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f2063616e6e6f742073746f7265496e737472756374696f6e7328293a20696e7660448201527f616c6964206b6579636f64650000000000000000000000000000000000000000606482015260840161027d565b5080610f3d816112b1565b915050610def565b60008060208385031215610f5857600080fd5b823567ffffffffffffffff80821115610f7057600080fd5b818501915085601f830112610f8457600080fd5b813581811115610f9357600080fd5b8660208260061b8501011115610fa857600080fd5b60209290920196919550909350505050565b600060208284031215610fcc57600080fd5b5035919050565b60008060408385031215610fe657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081016005841061105f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b60006020828403121561109657600080fd5b815180151581146110a657600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156110ef576110ef6110ad565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461114557600080fd5b50565b60006020828403121561115a57600080fd5b81356110a681611123565b6005811061114557600080fd5b60006020828403121561118457600080fd5b81356110a681611165565b6000602082840312156111a157600080fd5b81517fffffff0000000000000000000000000000000000000000000000000000000000811681146110a657600080fd5b6000828210156111e3576111e36110ad565b500390565b81356111f381611165565b6005811061122a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815460ff82169150817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008216178355602084013561126781611123565b74ffffffffffffffffffffffffffffffffffffffff008160081b16837fffffffffffffffffffffff0000000000000000000000000000000000000000008416171784555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112e3576112e36110ad565b506001019056fea26469706673582212207f2306b7e9458cbaaf143de007e1eb64664a8a3fb3216da31316011629e6293864736f6c634300080b003300000000000000000000000085c0de725944d43ef9b56212049502dc699ce56a",
      "r": "0x471014e2d8f695ed59be530fb975d45f28bb785f46d9f8fea83f045327ed8726",
      "s": "0x3fe2fdd28d98aa073f8e8189c09af78b64b4f1405dea0df19e8b6aa8c629f20a",
      "v": 86263,
      "chainId": 43114
    }
  }
}