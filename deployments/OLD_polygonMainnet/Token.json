{
  "address": "0x7c8a33088fF346B1C2A2d46Fa24A7e9bFC28feB6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Proxy",
          "name": "proxy_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "KEYCODE",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "",
          "type": "bytes3"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_proxy",
      "outputs": [
        {
          "internalType": "contract Proxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thisArr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thisNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x126d26a5a052d8b59b57c7b7e60e725b1ed2ca145d5af0227c7c4bde7c5dfd4c",
  "receipt": {
    "to": null,
    "from": "0x88532f5e88F6A1ccd9E64681aCc63416594000f4",
    "contractAddress": "0x7c8a33088fF346B1C2A2d46Fa24A7e9bFC28feB6",
    "transactionIndex": 16,
    "gasUsed": "846650",
    "logsBloom": "0x
    "blockHash": "0x10bbbaed8235159642c5e33a6d1cb4e1301e0db085217c2058a470c8a674f90f",
    "transactionHash": "0x126d26a5a052d8b59b57c7b7e60e725b1ed2ca145d5af0227c7c4bde7c5dfd4c",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 25864065,
        "transactionHash": "0x126d26a5a052d8b59b57c7b7e60e725b1ed2ca145d5af0227c7c4bde7c5dfd4c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000088532f5e88f6a1ccd9e64681acc63416594000f4",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a56f4d8acb2a0e000000000000000000000000000000000000000000000001dee71ac4d48a9efe000000000000000000000000000000000000000000002db342649334ad95e070000000000000000000000000000000000000000000000001de41ab7749bf74f0000000000000000000000000000000000000000000002db3430a028238610a7e",
        "logIndex": 39,
        "blockHash": "0x10bbbaed8235159642c5e33a6d1cb4e1301e0db085217c2058a470c8a674f90f"
      }
    ],
    "blockNumber": 25864065,
    "cumulativeGasUsed": "2043198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc4e2584DbD21c1a77CE15F63e738985d6FADf3De"
  ],
  "numDeployments": 3,
  "solcInputHash": "389fa6c06fc73f4f06f330cf536065fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"proxy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KEYCODE\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thisArr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"balanceOf\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Systems/TKN.sol\":\"Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\ncontract System {\\n    Proxy public _proxy;\\n\\n\\n    constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n    }\\n\\n\\n    function KEYCODE() external pure virtual returns (bytes3) {}\\n\\n\\n    modifier onlyPolicy {\\n        require (_proxy.approvedPolicies( msg.sender ), \\\"onlyPolicy(): only approved policies can call this function\\\");\\n        _;\\n    }\\n}\\n\\n\\ncontract Policy {\\n  Proxy public _proxy;\\n\\n\\n  constructor(Proxy proxy_) {\\n      _proxy = proxy_; \\n  }\\n\\n\\n  function requireSystem(bytes3 keycode_) internal view returns (address) {\\n    address systemForKeycode = _proxy.getSystemForKeycode(keycode_);\\n\\n    require(systemForKeycode != address(0), \\\"cannot _requireSytem(): system does not exist\\\" );\\n\\n    return systemForKeycode;\\n  }\\n\\n\\n  function configureSystems() virtual external onlyProxy {}\\n\\n\\n  modifier onlyProxy {\\n    require (msg.sender == address(_proxy), \\\"onlyProxy(): only the Proxy can call this function\\\");\\n    _;\\n  }\\n\\n}\\n\\n\\nenum Actions {\\n  InstallSystem,\\n  UpgradeSystem,\\n  ApprovePolicy,\\n  TerminatePolicy,\\n  ChangeExecutive\\n}\\n\\n\\nstruct Instruction {\\n  Actions action;\\n  address target;\\n}\\n\\n\\ncontract Proxy{\\n\\n  address public executive; \\n\\n  constructor() {\\n    executive = msg.sender;\\n  }\\n  \\n  modifier onlyExecutive() {\\n    require ( msg.sender == executive, \\\"onlyExecutive(): only the assigned executive can call the function\\\" );\\n    _;\\n  }\\n\\n\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  //                                  EPOCH STUFF                                    //\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  \\n\\n  uint256 public startingEpochTimestamp; \\n  uint256 public constant epochLength = 60 * 60 * 24 * 7; // number of seconds in a week\\n  bool public isLaunched;\\n\\n\\n  function currentEpoch() public view returns (uint256) {\\n    if ( isLaunched == true && block.timestamp >= startingEpochTimestamp ) {\\n      return (( block.timestamp - startingEpochTimestamp ) / epochLength ) + 1;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function launch() external onlyExecutive {\\n    require (isLaunched == false, \\\"cannot launch(): Proxy is already launched\\\");\\n    startingEpochTimestamp = epochLength * (( block.timestamp / epochLength ) + 1 );\\n    isLaunched = true;\\n  }\\n\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                                 DEPENDENCY MANAGEMENT                             //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n\\n  mapping(bytes3 => address) public getSystemForKeycode; // get contract for system keycode\\n  mapping(address => bytes3) public getKeycodeForSystem; // get system keycode for contract\\n  mapping(address => bool) public approvedPolicies; // whitelisted apps\\n  address[] public allPolicies;\\n\\n  event ActionExecuted(Actions action, address target);\\n  event AllPoliciesReconfigured(uint16 currentEpoch);\\n\\n  \\n  function executeAction(Actions action_, address target_) external onlyExecutive {\\n    if (action_ == Actions.InstallSystem) {\\n      _installSystem(target_); \\n\\n    } else if (action_ == Actions.UpgradeSystem) {\\n      _upgradeSystem(target_); \\n\\n    } else if (action_ == Actions.ApprovePolicy) {\\n      _approvePolicy(target_); \\n\\n    } else if (action_ == Actions.TerminatePolicy) {\\n      _terminatePolicy(target_); \\n    \\n    } else if (action_ == Actions.ChangeExecutive) {\\n      // require Proxy to install the executive system before calling ChangeExecutive on it\\n      require(getKeycodeForSystem[target_] == \\\"EXC\\\", \\\"cannot changeExecutive(): target is not the Executive system\\\");\\n      executive = target_;\\n    }\\n\\n    emit ActionExecuted(action_, target_);\\n  }\\n\\n\\n  function _installSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    \\n    // @NOTE check newSystem_ != 0\\n    require( getSystemForKeycode[keycode] == address(0), \\\"cannot _installSystem(): Existing system found for keycode\\\");\\n\\n    getSystemForKeycode[keycode] = newSystem_;\\n    getKeycodeForSystem[newSystem_] = keycode;\\n  }\\n\\n\\n  function _upgradeSystem(address newSystem_ ) internal {\\n    bytes3 keycode = System(newSystem_).KEYCODE();\\n    address oldSystem = getSystemForKeycode[keycode];\\n    \\n    require(oldSystem != address(0) && oldSystem != newSystem_, \\\"cannot _upgradeSystem(): an existing system must be upgraded to a new system\\\");\\n\\n    getKeycodeForSystem[oldSystem] = bytes3(0);\\n    getKeycodeForSystem[newSystem_] = keycode;\\n    getSystemForKeycode[keycode] = newSystem_;\\n\\n    _reconfigurePolicies();\\n  }\\n\\n\\n  function _approvePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == false, \\\"cannot _approvePolicy(): Policy is already approved\\\" );\\n\\n    approvedPolicies[policy_] = true;\\n    \\n    allPolicies.push(policy_);\\n    Policy(policy_).configureSystems();\\n  }\\n\\n  function _terminatePolicy(address policy_ ) internal {\\n    require( approvedPolicies[policy_] == true, \\\"cannot _terminatePolicy(): Policy is not approved\\\" );\\n    \\n    approvedPolicies[policy_] = false;\\n  }\\n\\n\\n  function _reconfigurePolicies() internal {\\n    for (uint i=0; i<allPolicies.length; i++) {\\n      address policy_ = allPolicies[i];\\n      if (approvedPolicies[policy_]) {\\n        Policy(policy_).configureSystems();\\n      }\\n    }\\n  }\\n}\\n\\n\\n\",\"keccak256\":\"0xcd12a205dfb8aa67849b69aa505c9b29cd8162d118672df21890d605c10972bb\",\"license\":\"GPL-2.0\"},\"contracts/Systems/TKN.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../Proxy.sol';\\n\\ncontract Token is System, IERC20 {\\n  \\n  //////////////////////////////////////////////////////////////////////////////\\n  //                              SYSTEM CONFIG                               //\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // @NOTE consider making these constant, reduce read cost\\n  string public name = \\\"PROXY Token\\\";\\n  string public symbol = \\\"PROX\\\";\\n  uint8 public decimals = 3;\\n\\n  uint256 public totalSupply = 0;\\n  // slot = sha3(1, address) -> balance\\n  mapping(address => uint256) public balanceOf;\\n  // slot 2 - length of thisArr\\n  // sha3(2) -> elements of thisArr\\n  bytes32[] public thisArr;\\n  uint public thisNum;\\n\\n  constructor(Proxy proxy_) System(proxy_) {\\n  }\\n\\n  function KEYCODE() external pure override returns (bytes3) { \\n    return \\\"TKN\\\"; \\n  }\\n\\n\\n  // brick the allowance features for the token (because transfers and transferFrom are restricted to a governance mechanism=)\\n  function allowance(address, address) external pure override returns (uint256) {\\n    return type(uint256).max;\\n  }\\n\\n  function approve(address, uint256) external pure override returns (bool) {\\n    return true;\\n  }\\n\\n\\n\\n  ////////////////////////////////////////////////////////////////////////////\\n  //                           POLICY INTERFACE                             //\\n  ////////////////////////////////////////////////////////////////////////////\\n\\n  \\n  // event Transfer(address from, address to, uint256 amount); => already declared in the imported IERC20.sol\\n\\n\\n  // mint tokensToMint_, but only if the msg.sender has enough reserve tokens to exchange\\n  function mint(address to_, uint256 amount_) external onlyPolicy returns (bool) {\\n\\n    totalSupply += amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(address(0), to_, amount_);\\n\\n    return true;\\n  }\\n\\n  function burn(address from_, uint256 amount_) external onlyPolicy returns (bool) {\\n    \\n    balanceOf[from_] -= amount_;\\n\\n    // Cannot underflow because a user's balance\\n    // will never be larger than the total supply.\\n    unchecked {\\n        totalSupply -= amount_;\\n    }\\n\\n    emit Transfer(from_, address(0), amount_);\\n\\n    return true;\\n  }\\n\\n\\n  // restrict 3rd party interactions with the token to approved policies.\\n  function transferFrom(address from_, address to_, uint256 amount_) public override onlyPolicy returns (bool) {\\n    balanceOf[from_] -= amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(from_, to_, amount_);\\n\\n    return true;\\n  }\\n\\n\\n  // restrict EOA transfers to approved policies.\\n  function transfer(address to_, uint256 amount_) public override onlyPolicy returns (bool) {\\n    balanceOf[msg.sender] -= amount_;\\n\\n    // Cannot overflow because the sum of all user\\n    // balances can't exceed the max uint256 value.\\n    unchecked {\\n        balanceOf[to_] += amount_;\\n    }\\n\\n    emit Transfer(msg.sender, to_, amount_);\\n\\n    return true;\\n  }\\n\\n\\n}\",\"keccak256\":\"0x9a18ba529854d95008143d8c9fb8dec6a7d02171728b48c973e6149b31e9a67e\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60c0604052600b60808190526a282927ac2c902a37b5b2b760a91b60a09081526200002e9160019190620000c4565b50604080518082019091526004808252630a0a49eb60e31b60209092019182526200005c91600291620000c4565b506003805460ff19168117905560006004553480156200007b57600080fd5b5060405162000e8a38038062000e8a8339810160408190526200009e916200016a565b600080546001600160a01b0319166001600160a01b0392909216919091179055620001d9565b828054620000d2906200019c565b90600052602060002090601f016020900481019282620000f6576000855562000141565b82601f106200011157805160ff191683800117855562000141565b8280016001018555821562000141579182015b828111156200014157825182559160200191906001019062000124565b506200014f92915062000153565b5090565b5b808211156200014f576000815560010162000154565b6000602082840312156200017d57600080fd5b81516001600160a01b03811681146200019557600080fd5b9392505050565b600181811c90821680620001b157607f821691505b60208210811415620001d357634e487b7160e01b600052602260045260246000fd5b50919050565b610ca180620001e96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806366f39cab11610097578063a9059cbb11610066578063a9059cbb1461020c578063cc2effdc1461021f578063dd62ed3e14610264578063fe8a76841461029957600080fd5b806366f39cab146101c857806370a08231146101d157806395d89b41146101f15780639dc29fac146101f957600080fd5b80631ae7ec2e116100d35780631ae7ec2e1461015557806323b872dd14610183578063313ce5671461019657806340c10f19146101b557600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013e575b600080fd5b6101026102ac565b60405161010f9190610a27565b60405180910390f35b61012e610126366004610ac3565b600192915050565b604051901515815260200161010f565b61014760045481565b60405190815260200161010f565b6040517f544b4e0000000000000000000000000000000000000000000000000000000000815260200161010f565b61012e610191366004610aed565b61033a565b6003546101a39060ff1681565b60405160ff909116815260200161010f565b61012e6101c3366004610ac3565b61050d565b61014760075481565b6101476101df366004610b29565b60056020526000908152604090205481565b6101026106aa565b61012e610207366004610ac3565b6106b7565b61012e61021a366004610ac3565b610864565b60005461023f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010f565b610147610272366004610b4b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b6101476102a7366004610b7e565b610a06565b600180546102b990610b97565b80601f01602080910402602001604051908101604052809291908181526020018280546102e590610b97565b80156103325780601f1061030757610100808354040283529160200191610332565b820191906000526020600020905b81548152906001019060200180831161031557829003601f168201915b505050505081565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610beb565b61045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604081208054849290610493908490610c3c565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260056020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104fb9086815260200190565b60405180910390a35060019392505050565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190610beb565b61062c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b816004600082825461063e9190610c53565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000818152600560209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a350600192915050565b600280546102b990610b97565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190610beb565b6107d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120805484929061080b908490610c3c565b909155505060048054839003905560405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610699565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f79190610beb565b610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b33600090815260056020526040812080548492906109a2908490610c3c565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260056020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106999086815260200190565b60068181548110610a1657600080fd5b600091825260209091200154905081565b600060208083528351808285015260005b81811015610a5457858101830151858201604001528201610a38565b81811115610a66576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610abe57600080fd5b919050565b60008060408385031215610ad657600080fd5b610adf83610a9a565b946020939093013593505050565b600080600060608486031215610b0257600080fd5b610b0b84610a9a565b9250610b1960208501610a9a565b9150604084013590509250925092565b600060208284031215610b3b57600080fd5b610b4482610a9a565b9392505050565b60008060408385031215610b5e57600080fd5b610b6783610a9a565b9150610b7560208401610a9a565b90509250929050565b600060208284031215610b9057600080fd5b5035919050565b600181811c90821680610bab57607f821691505b60208210811415610be5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215610bfd57600080fd5b81518015158114610b4457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610c4e57610c4e610c0d565b500390565b60008219821115610c6657610c66610c0d565b50019056fea2646970667358221220ec2e269f612e5ee38ac3e0d6a4fb557b4202ebad1cb336748c87487bb7fe88ca64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806366f39cab11610097578063a9059cbb11610066578063a9059cbb1461020c578063cc2effdc1461021f578063dd62ed3e14610264578063fe8a76841461029957600080fd5b806366f39cab146101c857806370a08231146101d157806395d89b41146101f15780639dc29fac146101f957600080fd5b80631ae7ec2e116100d35780631ae7ec2e1461015557806323b872dd14610183578063313ce5671461019657806340c10f19146101b557600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013e575b600080fd5b6101026102ac565b60405161010f9190610a27565b60405180910390f35b61012e610126366004610ac3565b600192915050565b604051901515815260200161010f565b61014760045481565b60405190815260200161010f565b6040517f544b4e0000000000000000000000000000000000000000000000000000000000815260200161010f565b61012e610191366004610aed565b61033a565b6003546101a39060ff1681565b60405160ff909116815260200161010f565b61012e6101c3366004610ac3565b61050d565b61014760075481565b6101476101df366004610b29565b60056020526000908152604090205481565b6101026106aa565b61012e610207366004610ac3565b6106b7565b61012e61021a366004610ac3565b610864565b60005461023f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010f565b610147610272366004610b4b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b6101476102a7366004610b7e565b610a06565b600180546102b990610b97565b80601f01602080910402602001604051908101604052809291908181526020018280546102e590610b97565b80156103325780601f1061030757610100808354040283529160200191610332565b820191906000526020600020905b81548152906001019060200180831161031557829003601f168201915b505050505081565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610beb565b61045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604081208054849290610493908490610c3c565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260056020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104fb9086815260200190565b60405180910390a35060019392505050565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190610beb565b61062c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b816004600082825461063e9190610c53565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000818152600560209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a350600192915050565b600280546102b990610b97565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190610beb565b6107d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120805484929061080b908490610c3c565b909155505060048054839003905560405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610699565b600080546040517f1d10fc6400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911690631d10fc6490602401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f79190610beb565b610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f6f6e6c79506f6c69637928293a206f6e6c7920617070726f76656420706f6c6960448201527f636965732063616e2063616c6c20746869732066756e6374696f6e00000000006064820152608401610455565b33600090815260056020526040812080548492906109a2908490610c3c565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260056020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106999086815260200190565b60068181548110610a1657600080fd5b600091825260209091200154905081565b600060208083528351808285015260005b81811015610a5457858101830151858201604001528201610a38565b81811115610a66576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610abe57600080fd5b919050565b60008060408385031215610ad657600080fd5b610adf83610a9a565b946020939093013593505050565b600080600060608486031215610b0257600080fd5b610b0b84610a9a565b9250610b1960208501610a9a565b9150604084013590509250925092565b600060208284031215610b3b57600080fd5b610b4482610a9a565b9392505050565b60008060408385031215610b5e57600080fd5b610b6783610a9a565b9150610b7560208401610a9a565b90509250929050565b600060208284031215610b9057600080fd5b5035919050565b600181811c90821680610bab57607f821691505b60208210811415610be5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215610bfd57600080fd5b81518015158114610b4457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610c4e57610c4e610c0d565b500390565b60008219821115610c6657610c66610c0d565b50019056fea2646970667358221220ec2e269f612e5ee38ac3e0d6a4fb557b4202ebad1cb336748c87487bb7fe88ca64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "balanceOf": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "totalSupply": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4378,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "_proxy",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Proxy)4866"
      },
      {
        "astId": 5425,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5428,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5431,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 5434,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5438,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5441,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "thisArr",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 5443,
        "contract": "contracts/Systems/TKN.sol:Token",
        "label": "thisNum",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Proxy)4866": {
        "encoding": "inplace",
        "label": "contract Proxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}